"use strict";(()=>{var Le=Object.create;var ne=Object.defineProperty;var Se=Object.getOwnPropertyDescriptor;var Me=Object.getOwnPropertyNames;var Ue=Object.getPrototypeOf,Ie=Object.prototype.hasOwnProperty;var Ce=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports);var Oe=(n,e,t,i)=>{if(e&&typeof e=="object"||typeof e=="function")for(let r of Me(e))!Ie.call(n,r)&&r!==t&&ne(n,r,{get:()=>e[r],enumerable:!(i=Se(e,r))||i.enumerable});return n};var Te=(n,e,t)=>(t=n!=null?Le(Ue(n)):{},Oe(e||!n||!n.__esModule?ne(t,"default",{value:n,enumerable:!0}):t,n));var ge=Ce((ei,V)=>{"use strict";var U=typeof Reflect=="object"?Reflect:null,oe=U&&typeof U.apply=="function"?U.apply:function(e,t,i){return Function.prototype.apply.call(e,t,i)},P;U&&typeof U.ownKeys=="function"?P=U.ownKeys:Object.getOwnPropertySymbols?P=function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:P=function(e){return Object.getOwnPropertyNames(e)};function We(n){console&&console.warn&&console.warn(n)}var ae=Number.isNaN||function(e){return e!==e};function m(){m.init.call(this)}V.exports=m;V.exports.once=Pe;m.EventEmitter=m;m.prototype._events=void 0;m.prototype._eventsCount=0;m.prototype._maxListeners=void 0;var se=10;function z(n){if(typeof n!="function")throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof n)}Object.defineProperty(m,"defaultMaxListeners",{enumerable:!0,get:function(){return se},set:function(n){if(typeof n!="number"||n<0||ae(n))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+n+".");se=n}});m.init=function(){(this._events===void 0||this._events===Object.getPrototypeOf(this)._events)&&(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0};m.prototype.setMaxListeners=function(e){if(typeof e!="number"||e<0||ae(e))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+e+".");return this._maxListeners=e,this};function ue(n){return n._maxListeners===void 0?m.defaultMaxListeners:n._maxListeners}m.prototype.getMaxListeners=function(){return ue(this)};m.prototype.emit=function(e){for(var t=[],i=1;i<arguments.length;i++)t.push(arguments[i]);var r=e==="error",o=this._events;if(o!==void 0)r=r&&o.error===void 0;else if(!r)return!1;if(r){var s;if(t.length>0&&(s=t[0]),s instanceof Error)throw s;var a=new Error("Unhandled error."+(s?" ("+s.message+")":""));throw a.context=s,a}var d=o[e];if(d===void 0)return!1;if(typeof d=="function")oe(d,this,t);else for(var u=d.length,h=pe(d,u),i=0;i<u;++i)oe(h[i],this,t);return!0};function de(n,e,t,i){var r,o,s;if(z(t),o=n._events,o===void 0?(o=n._events=Object.create(null),n._eventsCount=0):(o.newListener!==void 0&&(n.emit("newListener",e,t.listener?t.listener:t),o=n._events),s=o[e]),s===void 0)s=o[e]=t,++n._eventsCount;else if(typeof s=="function"?s=o[e]=i?[t,s]:[s,t]:i?s.unshift(t):s.push(t),r=ue(n),r>0&&s.length>r&&!s.warned){s.warned=!0;var a=new Error("Possible EventEmitter memory leak detected. "+s.length+" "+String(e)+" listeners added. Use emitter.setMaxListeners() to increase limit");a.name="MaxListenersExceededWarning",a.emitter=n,a.type=e,a.count=s.length,We(a)}return n}m.prototype.addListener=function(e,t){return de(this,e,t,!1)};m.prototype.on=m.prototype.addListener;m.prototype.prependListener=function(e,t){return de(this,e,t,!0)};function je(){if(!this.fired)return this.target.removeListener(this.type,this.wrapFn),this.fired=!0,arguments.length===0?this.listener.call(this.target):this.listener.apply(this.target,arguments)}function he(n,e,t){var i={fired:!1,wrapFn:void 0,target:n,type:e,listener:t},r=je.bind(i);return r.listener=t,i.wrapFn=r,r}m.prototype.once=function(e,t){return z(t),this.on(e,he(this,e,t)),this};m.prototype.prependOnceListener=function(e,t){return z(t),this.prependListener(e,he(this,e,t)),this};m.prototype.removeListener=function(e,t){var i,r,o,s,a;if(z(t),r=this._events,r===void 0)return this;if(i=r[e],i===void 0)return this;if(i===t||i.listener===t)--this._eventsCount===0?this._events=Object.create(null):(delete r[e],r.removeListener&&this.emit("removeListener",e,i.listener||t));else if(typeof i!="function"){for(o=-1,s=i.length-1;s>=0;s--)if(i[s]===t||i[s].listener===t){a=i[s].listener,o=s;break}if(o<0)return this;o===0?i.shift():Ke(i,o),i.length===1&&(r[e]=i[0]),r.removeListener!==void 0&&this.emit("removeListener",e,a||t)}return this};m.prototype.off=m.prototype.removeListener;m.prototype.removeAllListeners=function(e){var t,i,r;if(i=this._events,i===void 0)return this;if(i.removeListener===void 0)return arguments.length===0?(this._events=Object.create(null),this._eventsCount=0):i[e]!==void 0&&(--this._eventsCount===0?this._events=Object.create(null):delete i[e]),this;if(arguments.length===0){var o=Object.keys(i),s;for(r=0;r<o.length;++r)s=o[r],s!=="removeListener"&&this.removeAllListeners(s);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if(t=i[e],typeof t=="function")this.removeListener(e,t);else if(t!==void 0)for(r=t.length-1;r>=0;r--)this.removeListener(e,t[r]);return this};function ce(n,e,t){var i=n._events;if(i===void 0)return[];var r=i[e];return r===void 0?[]:typeof r=="function"?t?[r.listener||r]:[r]:t?Re(r):pe(r,r.length)}m.prototype.listeners=function(e){return ce(this,e,!0)};m.prototype.rawListeners=function(e){return ce(this,e,!1)};m.listenerCount=function(n,e){return typeof n.listenerCount=="function"?n.listenerCount(e):fe.call(n,e)};m.prototype.listenerCount=fe;function fe(n){var e=this._events;if(e!==void 0){var t=e[n];if(typeof t=="function")return 1;if(t!==void 0)return t.length}return 0}m.prototype.eventNames=function(){return this._eventsCount>0?P(this._events):[]};function pe(n,e){for(var t=new Array(e),i=0;i<e;++i)t[i]=n[i];return t}function Ke(n,e){for(;e+1<n.length;e++)n[e]=n[e+1];n.pop()}function Re(n){for(var e=new Array(n.length),t=0;t<e.length;++t)e[t]=n[t].listener||n[t];return e}function Pe(n,e){return new Promise(function(t,i){function r(s){n.removeListener(e,o),i(s)}function o(){typeof n.removeListener=="function"&&n.removeListener("error",r),t([].slice.call(arguments))}le(n,e,o,{once:!0}),e!=="error"&&ze(n,r,{once:!0})})}function ze(n,e,t){typeof n.on=="function"&&le(n,"error",e,t)}function le(n,e,t,i){if(typeof n.on=="function")i.once?n.once(e,t):n.on(e,t);else if(typeof n.addEventListener=="function")n.addEventListener(e,function r(o){i.once&&n.removeEventListener(e,r),t(o)});else throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type '+typeof n)}});function re(n,e,t,i){let r=n;return{unsub:t(async s=>{if(!s||s._discriminator!==e)return;let a=s,d=await r[a.type](...a.contents);i({contents:d,_discriminator:e,id:a.id})}),setInterface(s){r=s}}}var be=Te(ge(),1);function Fe(){let n=arguments[0];for(let e=1,t=arguments.length;e<t;e++)if(arguments[e])for(let i in arguments[e])n[i]=arguments[e][i];return n}var E=Fe;typeof Object.assign=="function"&&(E=Object.assign);function D(n,e,t,i){let r=n._nodes.get(e),o=null;return r&&(i==="mixed"?o=r.out&&r.out[t]||r.undirected&&r.undirected[t]:i==="directed"?o=r.out&&r.out[t]:o=r.undirected&&r.undirected[t]),o}function G(n){return typeof n=="object"&&n!==null}function $e(n){let e;for(e in n)return!1;return!0}function A(n,e,t){Object.defineProperty(n,e,{enumerable:!1,configurable:!1,writable:!0,value:t})}function N(n,e,t){let i={enumerable:!0,configurable:!0};typeof t=="function"?i.get=t:(i.value=t,i.writable=!1),Object.defineProperty(n,e,i)}function ye(n){return!(!G(n)||n.attributes&&!Array.isArray(n.attributes))}function Be(){let n=Math.floor(Math.random()*256)&255;return()=>n++}function L(){let n=arguments,e=null,t=-1;return{[Symbol.iterator](){return this},next(){let i=null;do{if(e===null){if(t++,t>=n.length)return{done:!0};e=n[t][Symbol.iterator]()}if(i=e.next(),i.done){e=null;continue}break}while(!0);return i}}}function O(){return{[Symbol.iterator](){return this},next(){return{done:!0}}}}var R=class extends Error{constructor(e){super(),this.name="GraphError",this.message=e}},l=class n extends R{constructor(e){super(e),this.name="InvalidArgumentsGraphError",typeof Error.captureStackTrace=="function"&&Error.captureStackTrace(this,n.prototype.constructor)}},p=class n extends R{constructor(e){super(e),this.name="NotFoundGraphError",typeof Error.captureStackTrace=="function"&&Error.captureStackTrace(this,n.prototype.constructor)}},y=class n extends R{constructor(e){super(e),this.name="UsageGraphError",typeof Error.captureStackTrace=="function"&&Error.captureStackTrace(this,n.prototype.constructor)}};function ve(n,e){this.key=n,this.attributes=e,this.clear()}ve.prototype.clear=function(){this.inDegree=0,this.outDegree=0,this.undirectedDegree=0,this.undirectedLoops=0,this.directedLoops=0,this.in={},this.out={},this.undirected={}};function xe(n,e){this.key=n,this.attributes=e,this.clear()}xe.prototype.clear=function(){this.inDegree=0,this.outDegree=0,this.directedLoops=0,this.in={},this.out={}};function ke(n,e){this.key=n,this.attributes=e,this.clear()}ke.prototype.clear=function(){this.undirectedDegree=0,this.undirectedLoops=0,this.undirected={}};function T(n,e,t,i,r){this.key=e,this.attributes=r,this.undirected=n,this.source=t,this.target=i}T.prototype.attach=function(){let n="out",e="in";this.undirected&&(n=e="undirected");let t=this.source.key,i=this.target.key;this.source[n][i]=this,!(this.undirected&&t===i)&&(this.target[e][t]=this)};T.prototype.attachMulti=function(){let n="out",e="in",t=this.source.key,i=this.target.key;this.undirected&&(n=e="undirected");let r=this.source[n],o=r[i];if(typeof o>"u"){r[i]=this,this.undirected&&t===i||(this.target[e][t]=this);return}o.previous=this,this.next=o,r[i]=this,this.target[e][t]=this};T.prototype.detach=function(){let n=this.source.key,e=this.target.key,t="out",i="in";this.undirected&&(t=i="undirected"),delete this.source[t][e],delete this.target[i][n]};T.prototype.detachMulti=function(){let n=this.source.key,e=this.target.key,t="out",i="in";this.undirected&&(t=i="undirected"),this.previous===void 0?this.next===void 0?(delete this.source[t][e],delete this.target[i][n]):(this.next.previous=void 0,this.source[t][e]=this.next,this.target[i][n]=this.next):(this.previous.next=this.next,this.next!==void 0&&(this.next.previous=this.previous))};var _e=0,Ee=1,Ye=2,Ge=3;function S(n,e,t,i,r,o,s){let a,d,u,h;if(i=""+i,t===_e){if(a=n._nodes.get(i),!a)throw new p(`Graph.${e}: could not find the "${i}" node in the graph.`);u=r,h=o}else if(t===Ge){if(r=""+r,d=n._edges.get(r),!d)throw new p(`Graph.${e}: could not find the "${r}" edge in the graph.`);let c=d.source.key,f=d.target.key;if(i===c)a=d.target;else if(i===f)a=d.source;else throw new p(`Graph.${e}: the "${i}" node is not attached to the "${r}" edge (${c}, ${f}).`);u=o,h=s}else{if(d=n._edges.get(i),!d)throw new p(`Graph.${e}: could not find the "${i}" edge in the graph.`);t===Ee?a=d.source:a=d.target,u=r,h=o}return[a,u,h]}function He(n,e,t){n.prototype[e]=function(i,r,o){let[s,a]=S(this,e,t,i,r,o);return s.attributes[a]}}function Xe(n,e,t){n.prototype[e]=function(i,r){let[o]=S(this,e,t,i,r);return o.attributes}}function qe(n,e,t){n.prototype[e]=function(i,r,o){let[s,a]=S(this,e,t,i,r,o);return s.attributes.hasOwnProperty(a)}}function Je(n,e,t){n.prototype[e]=function(i,r,o,s){let[a,d,u]=S(this,e,t,i,r,o,s);return a.attributes[d]=u,this.emit("nodeAttributesUpdated",{key:a.key,type:"set",attributes:a.attributes,name:d}),this}}function Ve(n,e,t){n.prototype[e]=function(i,r,o,s){let[a,d,u]=S(this,e,t,i,r,o,s);if(typeof u!="function")throw new l(`Graph.${e}: updater should be a function.`);let h=a.attributes,c=u(h[d]);return h[d]=c,this.emit("nodeAttributesUpdated",{key:a.key,type:"set",attributes:a.attributes,name:d}),this}}function Qe(n,e,t){n.prototype[e]=function(i,r,o){let[s,a]=S(this,e,t,i,r,o);return delete s.attributes[a],this.emit("nodeAttributesUpdated",{key:s.key,type:"remove",attributes:s.attributes,name:a}),this}}function Ze(n,e,t){n.prototype[e]=function(i,r,o){let[s,a]=S(this,e,t,i,r,o);if(!G(a))throw new l(`Graph.${e}: provided attributes are not a plain object.`);return s.attributes=a,this.emit("nodeAttributesUpdated",{key:s.key,type:"replace",attributes:s.attributes}),this}}function et(n,e,t){n.prototype[e]=function(i,r,o){let[s,a]=S(this,e,t,i,r,o);if(!G(a))throw new l(`Graph.${e}: provided attributes are not a plain object.`);return E(s.attributes,a),this.emit("nodeAttributesUpdated",{key:s.key,type:"merge",attributes:s.attributes,data:a}),this}}function tt(n,e,t){n.prototype[e]=function(i,r,o){let[s,a]=S(this,e,t,i,r,o);if(typeof a!="function")throw new l(`Graph.${e}: provided updater is not a function.`);return s.attributes=a(s.attributes),this.emit("nodeAttributesUpdated",{key:s.key,type:"update",attributes:s.attributes}),this}}var it=[{name:n=>`get${n}Attribute`,attacher:He},{name:n=>`get${n}Attributes`,attacher:Xe},{name:n=>`has${n}Attribute`,attacher:qe},{name:n=>`set${n}Attribute`,attacher:Je},{name:n=>`update${n}Attribute`,attacher:Ve},{name:n=>`remove${n}Attribute`,attacher:Qe},{name:n=>`replace${n}Attributes`,attacher:Ze},{name:n=>`merge${n}Attributes`,attacher:et},{name:n=>`update${n}Attributes`,attacher:tt}];function nt(n){it.forEach(function({name:e,attacher:t}){t(n,e("Node"),_e),t(n,e("Source"),Ee),t(n,e("Target"),Ye),t(n,e("Opposite"),Ge)})}function rt(n,e,t){n.prototype[e]=function(i,r){let o;if(this.type!=="mixed"&&t!=="mixed"&&t!==this.type)throw new y(`Graph.${e}: cannot find this type of edges in your ${this.type} graph.`);if(arguments.length>2){if(this.multi)throw new y(`Graph.${e}: cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.`);let s=""+i,a=""+r;if(r=arguments[2],o=D(this,s,a,t),!o)throw new p(`Graph.${e}: could not find an edge for the given path ("${s}" - "${a}").`)}else{if(t!=="mixed")throw new y(`Graph.${e}: calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type.`);if(i=""+i,o=this._edges.get(i),!o)throw new p(`Graph.${e}: could not find the "${i}" edge in the graph.`)}return o.attributes[r]}}function ot(n,e,t){n.prototype[e]=function(i){let r;if(this.type!=="mixed"&&t!=="mixed"&&t!==this.type)throw new y(`Graph.${e}: cannot find this type of edges in your ${this.type} graph.`);if(arguments.length>1){if(this.multi)throw new y(`Graph.${e}: cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.`);let o=""+i,s=""+arguments[1];if(r=D(this,o,s,t),!r)throw new p(`Graph.${e}: could not find an edge for the given path ("${o}" - "${s}").`)}else{if(t!=="mixed")throw new y(`Graph.${e}: calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type.`);if(i=""+i,r=this._edges.get(i),!r)throw new p(`Graph.${e}: could not find the "${i}" edge in the graph.`)}return r.attributes}}function st(n,e,t){n.prototype[e]=function(i,r){let o;if(this.type!=="mixed"&&t!=="mixed"&&t!==this.type)throw new y(`Graph.${e}: cannot find this type of edges in your ${this.type} graph.`);if(arguments.length>2){if(this.multi)throw new y(`Graph.${e}: cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.`);let s=""+i,a=""+r;if(r=arguments[2],o=D(this,s,a,t),!o)throw new p(`Graph.${e}: could not find an edge for the given path ("${s}" - "${a}").`)}else{if(t!=="mixed")throw new y(`Graph.${e}: calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type.`);if(i=""+i,o=this._edges.get(i),!o)throw new p(`Graph.${e}: could not find the "${i}" edge in the graph.`)}return o.attributes.hasOwnProperty(r)}}function at(n,e,t){n.prototype[e]=function(i,r,o){let s;if(this.type!=="mixed"&&t!=="mixed"&&t!==this.type)throw new y(`Graph.${e}: cannot find this type of edges in your ${this.type} graph.`);if(arguments.length>3){if(this.multi)throw new y(`Graph.${e}: cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.`);let a=""+i,d=""+r;if(r=arguments[2],o=arguments[3],s=D(this,a,d,t),!s)throw new p(`Graph.${e}: could not find an edge for the given path ("${a}" - "${d}").`)}else{if(t!=="mixed")throw new y(`Graph.${e}: calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type.`);if(i=""+i,s=this._edges.get(i),!s)throw new p(`Graph.${e}: could not find the "${i}" edge in the graph.`)}return s.attributes[r]=o,this.emit("edgeAttributesUpdated",{key:s.key,type:"set",attributes:s.attributes,name:r}),this}}function ut(n,e,t){n.prototype[e]=function(i,r,o){let s;if(this.type!=="mixed"&&t!=="mixed"&&t!==this.type)throw new y(`Graph.${e}: cannot find this type of edges in your ${this.type} graph.`);if(arguments.length>3){if(this.multi)throw new y(`Graph.${e}: cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.`);let a=""+i,d=""+r;if(r=arguments[2],o=arguments[3],s=D(this,a,d,t),!s)throw new p(`Graph.${e}: could not find an edge for the given path ("${a}" - "${d}").`)}else{if(t!=="mixed")throw new y(`Graph.${e}: calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type.`);if(i=""+i,s=this._edges.get(i),!s)throw new p(`Graph.${e}: could not find the "${i}" edge in the graph.`)}if(typeof o!="function")throw new l(`Graph.${e}: updater should be a function.`);return s.attributes[r]=o(s.attributes[r]),this.emit("edgeAttributesUpdated",{key:s.key,type:"set",attributes:s.attributes,name:r}),this}}function dt(n,e,t){n.prototype[e]=function(i,r){let o;if(this.type!=="mixed"&&t!=="mixed"&&t!==this.type)throw new y(`Graph.${e}: cannot find this type of edges in your ${this.type} graph.`);if(arguments.length>2){if(this.multi)throw new y(`Graph.${e}: cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.`);let s=""+i,a=""+r;if(r=arguments[2],o=D(this,s,a,t),!o)throw new p(`Graph.${e}: could not find an edge for the given path ("${s}" - "${a}").`)}else{if(t!=="mixed")throw new y(`Graph.${e}: calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type.`);if(i=""+i,o=this._edges.get(i),!o)throw new p(`Graph.${e}: could not find the "${i}" edge in the graph.`)}return delete o.attributes[r],this.emit("edgeAttributesUpdated",{key:o.key,type:"remove",attributes:o.attributes,name:r}),this}}function ht(n,e,t){n.prototype[e]=function(i,r){let o;if(this.type!=="mixed"&&t!=="mixed"&&t!==this.type)throw new y(`Graph.${e}: cannot find this type of edges in your ${this.type} graph.`);if(arguments.length>2){if(this.multi)throw new y(`Graph.${e}: cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.`);let s=""+i,a=""+r;if(r=arguments[2],o=D(this,s,a,t),!o)throw new p(`Graph.${e}: could not find an edge for the given path ("${s}" - "${a}").`)}else{if(t!=="mixed")throw new y(`Graph.${e}: calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type.`);if(i=""+i,o=this._edges.get(i),!o)throw new p(`Graph.${e}: could not find the "${i}" edge in the graph.`)}if(!G(r))throw new l(`Graph.${e}: provided attributes are not a plain object.`);return o.attributes=r,this.emit("edgeAttributesUpdated",{key:o.key,type:"replace",attributes:o.attributes}),this}}function ct(n,e,t){n.prototype[e]=function(i,r){let o;if(this.type!=="mixed"&&t!=="mixed"&&t!==this.type)throw new y(`Graph.${e}: cannot find this type of edges in your ${this.type} graph.`);if(arguments.length>2){if(this.multi)throw new y(`Graph.${e}: cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.`);let s=""+i,a=""+r;if(r=arguments[2],o=D(this,s,a,t),!o)throw new p(`Graph.${e}: could not find an edge for the given path ("${s}" - "${a}").`)}else{if(t!=="mixed")throw new y(`Graph.${e}: calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type.`);if(i=""+i,o=this._edges.get(i),!o)throw new p(`Graph.${e}: could not find the "${i}" edge in the graph.`)}if(!G(r))throw new l(`Graph.${e}: provided attributes are not a plain object.`);return E(o.attributes,r),this.emit("edgeAttributesUpdated",{key:o.key,type:"merge",attributes:o.attributes,data:r}),this}}function ft(n,e,t){n.prototype[e]=function(i,r){let o;if(this.type!=="mixed"&&t!=="mixed"&&t!==this.type)throw new y(`Graph.${e}: cannot find this type of edges in your ${this.type} graph.`);if(arguments.length>2){if(this.multi)throw new y(`Graph.${e}: cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.`);let s=""+i,a=""+r;if(r=arguments[2],o=D(this,s,a,t),!o)throw new p(`Graph.${e}: could not find an edge for the given path ("${s}" - "${a}").`)}else{if(t!=="mixed")throw new y(`Graph.${e}: calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type.`);if(i=""+i,o=this._edges.get(i),!o)throw new p(`Graph.${e}: could not find the "${i}" edge in the graph.`)}if(typeof r!="function")throw new l(`Graph.${e}: provided updater is not a function.`);return o.attributes=r(o.attributes),this.emit("edgeAttributesUpdated",{key:o.key,type:"update",attributes:o.attributes}),this}}var pt=[{name:n=>`get${n}Attribute`,attacher:rt},{name:n=>`get${n}Attributes`,attacher:ot},{name:n=>`has${n}Attribute`,attacher:st},{name:n=>`set${n}Attribute`,attacher:at},{name:n=>`update${n}Attribute`,attacher:ut},{name:n=>`remove${n}Attribute`,attacher:dt},{name:n=>`replace${n}Attributes`,attacher:ht},{name:n=>`merge${n}Attributes`,attacher:ct},{name:n=>`update${n}Attributes`,attacher:ft}];function lt(n){pt.forEach(function({name:e,attacher:t}){t(n,e("Edge"),"mixed"),t(n,e("DirectedEdge"),"directed"),t(n,e("UndirectedEdge"),"undirected")})}var gt=[{name:"edges",type:"mixed"},{name:"inEdges",type:"directed",direction:"in"},{name:"outEdges",type:"directed",direction:"out"},{name:"inboundEdges",type:"mixed",direction:"in"},{name:"outboundEdges",type:"mixed",direction:"out"},{name:"directedEdges",type:"directed"},{name:"undirectedEdges",type:"undirected"}];function yt(n,e,t,i){let r=!1;for(let o in e){if(o===i)continue;let s=e[o];if(r=t(s.key,s.attributes,s.source.key,s.target.key,s.source.attributes,s.target.attributes,s.undirected),n&&r)return s.key}}function wt(n,e,t,i){let r,o,s,a=!1;for(let d in e)if(d!==i){r=e[d];do{if(o=r.source,s=r.target,a=t(r.key,r.attributes,o.key,s.key,o.attributes,s.attributes,r.undirected),n&&a)return r.key;r=r.next}while(r!==void 0)}}function Q(n,e){let t=Object.keys(n),i=t.length,r,o=0;return{[Symbol.iterator](){return this},next(){do if(r)r=r.next;else{if(o>=i)return{done:!0};let s=t[o++];if(s===e){r=void 0;continue}r=n[s]}while(!r);return{done:!1,value:{edge:r.key,attributes:r.attributes,source:r.source.key,target:r.target.key,sourceAttributes:r.source.attributes,targetAttributes:r.target.attributes,undirected:r.undirected}}}}}function mt(n,e,t,i){let r=e[t];if(!r)return;let o=r.source,s=r.target;if(i(r.key,r.attributes,o.key,s.key,o.attributes,s.attributes,r.undirected)&&n)return r.key}function bt(n,e,t,i){let r=e[t];if(!r)return;let o=!1;do{if(o=i(r.key,r.attributes,r.source.key,r.target.key,r.source.attributes,r.target.attributes,r.undirected),n&&o)return r.key;r=r.next}while(r!==void 0)}function Z(n,e){let t=n[e];if(t.next!==void 0)return{[Symbol.iterator](){return this},next(){if(!t)return{done:!0};let r={edge:t.key,attributes:t.attributes,source:t.source.key,target:t.target.key,sourceAttributes:t.source.attributes,targetAttributes:t.target.attributes,undirected:t.undirected};return t=t.next,{done:!1,value:r}}};let i=!1;return{[Symbol.iterator](){return this},next(){return i===!0?{done:!0}:(i=!0,{done:!1,value:{edge:t.key,attributes:t.attributes,source:t.source.key,target:t.target.key,sourceAttributes:t.source.attributes,targetAttributes:t.target.attributes,undirected:t.undirected}})}}}function $t(n,e){if(n.size===0)return[];if(e==="mixed"||e===n.type)return Array.from(n._edges.keys());let t=e==="undirected"?n.undirectedSize:n.directedSize,i=new Array(t),r=e==="undirected",o=n._edges.values(),s=0,a,d;for(;a=o.next(),a.done!==!0;)d=a.value,d.undirected===r&&(i[s++]=d.key);return i}function Ae(n,e,t,i){if(e.size===0)return;let r=t!=="mixed"&&t!==e.type,o=t==="undirected",s,a,d=!1,u=e._edges.values();for(;s=u.next(),s.done!==!0;){if(a=s.value,r&&a.undirected!==o)continue;let{key:h,attributes:c,source:f,target:g}=a;if(d=i(h,c,f.key,g.key,f.attributes,g.attributes,a.undirected),n&&d)return h}}function vt(n,e){if(n.size===0)return O();let t=e!=="mixed"&&e!==n.type,i=e==="undirected",r=n._edges.values();return{[Symbol.iterator](){return this},next(){let o,s;for(;;){if(o=r.next(),o.done)return o;if(s=o.value,!(t&&s.undirected!==i))break}return{value:{edge:s.key,attributes:s.attributes,source:s.source.key,target:s.target.key,sourceAttributes:s.source.attributes,targetAttributes:s.target.attributes,undirected:s.undirected},done:!1}}}}function ee(n,e,t,i,r,o){let s=e?wt:yt,a;if(t!=="undirected"&&(i!=="out"&&(a=s(n,r.in,o),n&&a)||i!=="in"&&(a=s(n,r.out,o,i?void 0:r.key),n&&a))||t!=="directed"&&(a=s(n,r.undirected,o),n&&a))return a}function xt(n,e,t,i){let r=[];return ee(!1,n,e,t,i,function(o){r.push(o)}),r}function kt(n,e,t){let i=O();return n!=="undirected"&&(e!=="out"&&typeof t.in<"u"&&(i=L(i,Q(t.in))),e!=="in"&&typeof t.out<"u"&&(i=L(i,Q(t.out,e?void 0:t.key)))),n!=="directed"&&typeof t.undirected<"u"&&(i=L(i,Q(t.undirected))),i}function te(n,e,t,i,r,o,s){let a=t?bt:mt,d;if(e!=="undirected"&&(typeof r.in<"u"&&i!=="out"&&(d=a(n,r.in,o,s),n&&d)||typeof r.out<"u"&&i!=="in"&&(i||r.key!==o)&&(d=a(n,r.out,o,s),n&&d))||e!=="directed"&&typeof r.undirected<"u"&&(d=a(n,r.undirected,o,s),n&&d))return d}function _t(n,e,t,i,r){let o=[];return te(!1,n,e,t,i,r,function(s){o.push(s)}),o}function Et(n,e,t,i){let r=O();return n!=="undirected"&&(typeof t.in<"u"&&e!=="out"&&i in t.in&&(r=L(r,Z(t.in,i))),typeof t.out<"u"&&e!=="in"&&i in t.out&&(e||t.key!==i)&&(r=L(r,Z(t.out,i)))),n!=="directed"&&typeof t.undirected<"u"&&i in t.undirected&&(r=L(r,Z(t.undirected,i))),r}function Gt(n,e){let{name:t,type:i,direction:r}=e;n.prototype[t]=function(o,s){if(i!=="mixed"&&this.type!=="mixed"&&i!==this.type)return[];if(!arguments.length)return $t(this,i);if(arguments.length===1){o=""+o;let a=this._nodes.get(o);if(typeof a>"u")throw new p(`Graph.${t}: could not find the "${o}" node in the graph.`);return xt(this.multi,i==="mixed"?this.type:i,r,a)}if(arguments.length===2){o=""+o,s=""+s;let a=this._nodes.get(o);if(!a)throw new p(`Graph.${t}:  could not find the "${o}" source node in the graph.`);if(!this._nodes.has(s))throw new p(`Graph.${t}:  could not find the "${s}" target node in the graph.`);return _t(i,this.multi,r,a,s)}throw new l(`Graph.${t}: too many arguments (expecting 0, 1 or 2 and got ${arguments.length}).`)}}function At(n,e){let{name:t,type:i,direction:r}=e,o="forEach"+t[0].toUpperCase()+t.slice(1,-1);n.prototype[o]=function(u,h,c){if(!(i!=="mixed"&&this.type!=="mixed"&&i!==this.type)){if(arguments.length===1)return c=u,Ae(!1,this,i,c);if(arguments.length===2){u=""+u,c=h;let f=this._nodes.get(u);if(typeof f>"u")throw new p(`Graph.${o}: could not find the "${u}" node in the graph.`);return ee(!1,this.multi,i==="mixed"?this.type:i,r,f,c)}if(arguments.length===3){u=""+u,h=""+h;let f=this._nodes.get(u);if(!f)throw new p(`Graph.${o}:  could not find the "${u}" source node in the graph.`);if(!this._nodes.has(h))throw new p(`Graph.${o}:  could not find the "${h}" target node in the graph.`);return te(!1,i,this.multi,r,f,h,c)}throw new l(`Graph.${o}: too many arguments (expecting 1, 2 or 3 and got ${arguments.length}).`)}};let s="map"+t[0].toUpperCase()+t.slice(1);n.prototype[s]=function(){let u=Array.prototype.slice.call(arguments),h=u.pop(),c;if(u.length===0){let f=0;i!=="directed"&&(f+=this.undirectedSize),i!=="undirected"&&(f+=this.directedSize),c=new Array(f);let g=0;u.push((w,x,v,$,k,_,M)=>{c[g++]=h(w,x,v,$,k,_,M)})}else c=[],u.push((f,g,w,x,v,$,k)=>{c.push(h(f,g,w,x,v,$,k))});return this[o].apply(this,u),c};let a="filter"+t[0].toUpperCase()+t.slice(1);n.prototype[a]=function(){let u=Array.prototype.slice.call(arguments),h=u.pop(),c=[];return u.push((f,g,w,x,v,$,k)=>{h(f,g,w,x,v,$,k)&&c.push(f)}),this[o].apply(this,u),c};let d="reduce"+t[0].toUpperCase()+t.slice(1);n.prototype[d]=function(){let u=Array.prototype.slice.call(arguments);if(u.length<2||u.length>4)throw new l(`Graph.${d}: invalid number of arguments (expecting 2, 3 or 4 and got ${u.length}).`);if(typeof u[u.length-1]=="function"&&typeof u[u.length-2]!="function")throw new l(`Graph.${d}: missing initial value. You must provide it because the callback takes more than one argument and we cannot infer the initial value from the first iteration, as you could with a simple array.`);let h,c;u.length===2?(h=u[0],c=u[1],u=[]):u.length===3?(h=u[1],c=u[2],u=[u[0]]):u.length===4&&(h=u[2],c=u[3],u=[u[0],u[1]]);let f=c;return u.push((g,w,x,v,$,k,_)=>{f=h(f,g,w,x,v,$,k,_)}),this[o].apply(this,u),f}}function Dt(n,e){let{name:t,type:i,direction:r}=e,o="find"+t[0].toUpperCase()+t.slice(1,-1);n.prototype[o]=function(d,u,h){if(i!=="mixed"&&this.type!=="mixed"&&i!==this.type)return!1;if(arguments.length===1)return h=d,Ae(!0,this,i,h);if(arguments.length===2){d=""+d,h=u;let c=this._nodes.get(d);if(typeof c>"u")throw new p(`Graph.${o}: could not find the "${d}" node in the graph.`);return ee(!0,this.multi,i==="mixed"?this.type:i,r,c,h)}if(arguments.length===3){d=""+d,u=""+u;let c=this._nodes.get(d);if(!c)throw new p(`Graph.${o}:  could not find the "${d}" source node in the graph.`);if(!this._nodes.has(u))throw new p(`Graph.${o}:  could not find the "${u}" target node in the graph.`);return te(!0,i,this.multi,r,c,u,h)}throw new l(`Graph.${o}: too many arguments (expecting 1, 2 or 3 and got ${arguments.length}).`)};let s="some"+t[0].toUpperCase()+t.slice(1,-1);n.prototype[s]=function(){let d=Array.prototype.slice.call(arguments),u=d.pop();return d.push((c,f,g,w,x,v,$)=>u(c,f,g,w,x,v,$)),!!this[o].apply(this,d)};let a="every"+t[0].toUpperCase()+t.slice(1,-1);n.prototype[a]=function(){let d=Array.prototype.slice.call(arguments),u=d.pop();return d.push((c,f,g,w,x,v,$)=>!u(c,f,g,w,x,v,$)),!this[o].apply(this,d)}}function Nt(n,e){let{name:t,type:i,direction:r}=e,o=t.slice(0,-1)+"Entries";n.prototype[o]=function(s,a){if(i!=="mixed"&&this.type!=="mixed"&&i!==this.type)return O();if(!arguments.length)return vt(this,i);if(arguments.length===1){s=""+s;let d=this._nodes.get(s);if(!d)throw new p(`Graph.${o}: could not find the "${s}" node in the graph.`);return kt(i,r,d)}if(arguments.length===2){s=""+s,a=""+a;let d=this._nodes.get(s);if(!d)throw new p(`Graph.${o}:  could not find the "${s}" source node in the graph.`);if(!this._nodes.has(a))throw new p(`Graph.${o}:  could not find the "${a}" target node in the graph.`);return Et(i,r,d,a)}throw new l(`Graph.${o}: too many arguments (expecting 0, 1 or 2 and got ${arguments.length}).`)}}function Lt(n){gt.forEach(e=>{Gt(n,e),At(n,e),Dt(n,e),Nt(n,e)})}var St=[{name:"neighbors",type:"mixed"},{name:"inNeighbors",type:"directed",direction:"in"},{name:"outNeighbors",type:"directed",direction:"out"},{name:"inboundNeighbors",type:"mixed",direction:"in"},{name:"outboundNeighbors",type:"mixed",direction:"out"},{name:"directedNeighbors",type:"directed"},{name:"undirectedNeighbors",type:"undirected"}];function q(){this.A=null,this.B=null}q.prototype.wrap=function(n){this.A===null?this.A=n:this.B===null&&(this.B=n)};q.prototype.has=function(n){return this.A!==null&&n in this.A||this.B!==null&&n in this.B};function j(n,e,t,i,r){for(let o in i){let s=i[o],a=s.source,d=s.target,u=a===t?d:a;if(e&&e.has(u.key))continue;let h=r(u.key,u.attributes);if(n&&h)return u.key}}function ie(n,e,t,i,r){if(e!=="mixed"){if(e==="undirected")return j(n,null,i,i.undirected,r);if(typeof t=="string")return j(n,null,i,i[t],r)}let o=new q,s;if(e!=="undirected"){if(t!=="out"){if(s=j(n,null,i,i.in,r),n&&s)return s;o.wrap(i.in)}if(t!=="in"){if(s=j(n,o,i,i.out,r),n&&s)return s;o.wrap(i.out)}}if(e!=="directed"&&(s=j(n,o,i,i.undirected,r),n&&s))return s}function Mt(n,e,t){if(n!=="mixed"){if(n==="undirected")return Object.keys(t.undirected);if(typeof e=="string")return Object.keys(t[e])}let i=[];return ie(!1,n,e,t,function(r){i.push(r)}),i}function K(n,e,t){let i=Object.keys(t),r=i.length,o=0;return{[Symbol.iterator](){return this},next(){let s=null;do{if(o>=r)return n&&n.wrap(t),{done:!0};let a=t[i[o++]],d=a.source,u=a.target;if(s=d===e?u:d,n&&n.has(s.key)){s=null;continue}}while(s===null);return{done:!1,value:{neighbor:s.key,attributes:s.attributes}}}}}function Ut(n,e,t){if(n!=="mixed"){if(n==="undirected")return K(null,t,t.undirected);if(typeof e=="string")return K(null,t,t[e])}let i=O(),r=new q;return n!=="undirected"&&(e!=="out"&&(i=L(i,K(r,t,t.in))),e!=="in"&&(i=L(i,K(r,t,t.out)))),n!=="directed"&&(i=L(i,K(r,t,t.undirected))),i}function It(n,e){let{name:t,type:i,direction:r}=e;n.prototype[t]=function(o){if(i!=="mixed"&&this.type!=="mixed"&&i!==this.type)return[];o=""+o;let s=this._nodes.get(o);if(typeof s>"u")throw new p(`Graph.${t}: could not find the "${o}" node in the graph.`);return Mt(i==="mixed"?this.type:i,r,s)}}function Ct(n,e){let{name:t,type:i,direction:r}=e,o="forEach"+t[0].toUpperCase()+t.slice(1,-1);n.prototype[o]=function(u,h){if(i!=="mixed"&&this.type!=="mixed"&&i!==this.type)return;u=""+u;let c=this._nodes.get(u);if(typeof c>"u")throw new p(`Graph.${o}: could not find the "${u}" node in the graph.`);ie(!1,i==="mixed"?this.type:i,r,c,h)};let s="map"+t[0].toUpperCase()+t.slice(1);n.prototype[s]=function(u,h){let c=[];return this[o](u,(f,g)=>{c.push(h(f,g))}),c};let a="filter"+t[0].toUpperCase()+t.slice(1);n.prototype[a]=function(u,h){let c=[];return this[o](u,(f,g)=>{h(f,g)&&c.push(f)}),c};let d="reduce"+t[0].toUpperCase()+t.slice(1);n.prototype[d]=function(u,h,c){if(arguments.length<3)throw new l(`Graph.${d}: missing initial value. You must provide it because the callback takes more than one argument and we cannot infer the initial value from the first iteration, as you could with a simple array.`);let f=c;return this[o](u,(g,w)=>{f=h(f,g,w)}),f}}function Ot(n,e){let{name:t,type:i,direction:r}=e,o=t[0].toUpperCase()+t.slice(1,-1),s="find"+o;n.prototype[s]=function(u,h){if(i!=="mixed"&&this.type!=="mixed"&&i!==this.type)return;u=""+u;let c=this._nodes.get(u);if(typeof c>"u")throw new p(`Graph.${s}: could not find the "${u}" node in the graph.`);return ie(!0,i==="mixed"?this.type:i,r,c,h)};let a="some"+o;n.prototype[a]=function(u,h){return!!this[s](u,h)};let d="every"+o;n.prototype[d]=function(u,h){return!this[s](u,(f,g)=>!h(f,g))}}function Tt(n,e){let{name:t,type:i,direction:r}=e,o=t.slice(0,-1)+"Entries";n.prototype[o]=function(s){if(i!=="mixed"&&this.type!=="mixed"&&i!==this.type)return O();s=""+s;let a=this._nodes.get(s);if(typeof a>"u")throw new p(`Graph.${o}: could not find the "${s}" node in the graph.`);return Ut(i==="mixed"?this.type:i,r,a)}}function Wt(n){St.forEach(e=>{It(n,e),Ct(n,e),Ot(n,e),Tt(n,e)})}function F(n,e,t,i,r){let o=i._nodes.values(),s=i.type,a,d,u,h,c,f,g;for(;a=o.next(),a.done!==!0;){let w=!1;if(d=a.value,s!=="undirected"){h=d.out;for(u in h){c=h[u];do{if(f=c.target,w=!0,g=r(d.key,f.key,d.attributes,f.attributes,c.key,c.attributes,c.undirected),n&&g)return c;c=c.next}while(c)}}if(s!=="directed"){h=d.undirected;for(u in h)if(!(e&&d.key>u)){c=h[u];do{if(f=c.target,f.key!==u&&(f=c.source),w=!0,g=r(d.key,f.key,d.attributes,f.attributes,c.key,c.attributes,c.undirected),n&&g)return c;c=c.next}while(c)}}if(t&&!w&&(g=r(d.key,null,d.attributes,null,null,null,null),n&&g))return null}}function jt(n,e){let t={key:n};return $e(e.attributes)||(t.attributes=E({},e.attributes)),t}function Kt(n,e,t){let i={key:e,source:t.source.key,target:t.target.key};return $e(t.attributes)||(i.attributes=E({},t.attributes)),n==="mixed"&&t.undirected&&(i.undirected=!0),i}function Rt(n){if(!G(n))throw new l('Graph.import: invalid serialized node. A serialized node should be a plain object with at least a "key" property.');if(!("key"in n))throw new l("Graph.import: serialized node is missing its key.");if("attributes"in n&&(!G(n.attributes)||n.attributes===null))throw new l("Graph.import: invalid attributes. Attributes should be a plain object, null or omitted.")}function Pt(n){if(!G(n))throw new l('Graph.import: invalid serialized edge. A serialized edge should be a plain object with at least a "source" & "target" property.');if(!("source"in n))throw new l("Graph.import: serialized edge is missing its source.");if(!("target"in n))throw new l("Graph.import: serialized edge is missing its target.");if("attributes"in n&&(!G(n.attributes)||n.attributes===null))throw new l("Graph.import: invalid attributes. Attributes should be a plain object, null or omitted.");if("undirected"in n&&typeof n.undirected!="boolean")throw new l("Graph.import: invalid undirectedness information. Undirected should be boolean or omitted.")}var zt=Be(),Ft=new Set(["directed","undirected","mixed"]),we=new Set(["domain","_events","_eventsCount","_maxListeners"]),Bt=[{name:n=>`${n}Edge`,generateKey:!0},{name:n=>`${n}DirectedEdge`,generateKey:!0,type:"directed"},{name:n=>`${n}UndirectedEdge`,generateKey:!0,type:"undirected"},{name:n=>`${n}EdgeWithKey`},{name:n=>`${n}DirectedEdgeWithKey`,type:"directed"},{name:n=>`${n}UndirectedEdgeWithKey`,type:"undirected"}],Yt={allowSelfLoops:!0,multi:!1,type:"mixed"};function Ht(n,e,t){if(t&&!G(t))throw new l(`Graph.addNode: invalid attributes. Expecting an object but got "${t}"`);if(e=""+e,t=t||{},n._nodes.has(e))throw new y(`Graph.addNode: the "${e}" node already exist in the graph.`);let i=new n.NodeDataClass(e,t);return n._nodes.set(e,i),n.emit("nodeAdded",{key:e,attributes:t}),i}function me(n,e,t){let i=new n.NodeDataClass(e,t);return n._nodes.set(e,i),n.emit("nodeAdded",{key:e,attributes:t}),i}function De(n,e,t,i,r,o,s,a){if(!i&&n.type==="undirected")throw new y(`Graph.${e}: you cannot add a directed edge to an undirected graph. Use the #.addEdge or #.addUndirectedEdge instead.`);if(i&&n.type==="directed")throw new y(`Graph.${e}: you cannot add an undirected edge to a directed graph. Use the #.addEdge or #.addDirectedEdge instead.`);if(a&&!G(a))throw new l(`Graph.${e}: invalid attributes. Expecting an object but got "${a}"`);if(o=""+o,s=""+s,a=a||{},!n.allowSelfLoops&&o===s)throw new y(`Graph.${e}: source & target are the same ("${o}"), thus creating a loop explicitly forbidden by this graph 'allowSelfLoops' option set to false.`);let d=n._nodes.get(o),u=n._nodes.get(s);if(!d)throw new p(`Graph.${e}: source node "${o}" not found.`);if(!u)throw new p(`Graph.${e}: target node "${s}" not found.`);let h={key:null,undirected:i,source:o,target:s,attributes:a};if(t)r=n._edgeKeyGenerator();else if(r=""+r,n._edges.has(r))throw new y(`Graph.${e}: the "${r}" edge already exists in the graph.`);if(!n.multi&&(i?typeof d.undirected[s]<"u":typeof d.out[s]<"u"))throw new y(`Graph.${e}: an edge linking "${o}" to "${s}" already exists. If you really want to add multiple edges linking those nodes, you should create a multi graph by using the 'multi' option.`);let c=new T(i,r,d,u,a);n._edges.set(r,c);let f=o===s;return i?(d.undirectedDegree++,u.undirectedDegree++,f&&(d.undirectedLoops++,n._undirectedSelfLoopCount++)):(d.outDegree++,u.inDegree++,f&&(d.directedLoops++,n._directedSelfLoopCount++)),n.multi?c.attachMulti():c.attach(),i?n._undirectedSize++:n._directedSize++,h.key=r,n.emit("edgeAdded",h),r}function Xt(n,e,t,i,r,o,s,a,d){if(!i&&n.type==="undirected")throw new y(`Graph.${e}: you cannot merge/update a directed edge to an undirected graph. Use the #.mergeEdge/#.updateEdge or #.addUndirectedEdge instead.`);if(i&&n.type==="directed")throw new y(`Graph.${e}: you cannot merge/update an undirected edge to a directed graph. Use the #.mergeEdge/#.updateEdge or #.addDirectedEdge instead.`);if(a){if(d){if(typeof a!="function")throw new l(`Graph.${e}: invalid updater function. Expecting a function but got "${a}"`)}else if(!G(a))throw new l(`Graph.${e}: invalid attributes. Expecting an object but got "${a}"`)}o=""+o,s=""+s;let u;if(d&&(u=a,a=void 0),!n.allowSelfLoops&&o===s)throw new y(`Graph.${e}: source & target are the same ("${o}"), thus creating a loop explicitly forbidden by this graph 'allowSelfLoops' option set to false.`);let h=n._nodes.get(o),c=n._nodes.get(s),f,g;if(!t&&(f=n._edges.get(r),f)){if((f.source.key!==o||f.target.key!==s)&&(!i||f.source.key!==s||f.target.key!==o))throw new y(`Graph.${e}: inconsistency detected when attempting to merge the "${r}" edge with "${o}" source & "${s}" target vs. ("${f.source.key}", "${f.target.key}").`);g=f}if(!g&&!n.multi&&h&&(g=i?h.undirected[s]:h.out[s]),g){let k=[g.key,!1,!1,!1];if(d?!u:!a)return k;if(d){let _=g.attributes;g.attributes=u(_),n.emit("edgeAttributesUpdated",{type:"replace",key:g.key,attributes:g.attributes})}else E(g.attributes,a),n.emit("edgeAttributesUpdated",{type:"merge",key:g.key,attributes:g.attributes,data:a});return k}a=a||{},d&&u&&(a=u(a));let w={key:null,undirected:i,source:o,target:s,attributes:a};if(t)r=n._edgeKeyGenerator();else if(r=""+r,n._edges.has(r))throw new y(`Graph.${e}: the "${r}" edge already exists in the graph.`);let x=!1,v=!1;h||(h=me(n,o,{}),x=!0,o===s&&(c=h,v=!0)),c||(c=me(n,s,{}),v=!0),f=new T(i,r,h,c,a),n._edges.set(r,f);let $=o===s;return i?(h.undirectedDegree++,c.undirectedDegree++,$&&(h.undirectedLoops++,n._undirectedSelfLoopCount++)):(h.outDegree++,c.inDegree++,$&&(h.directedLoops++,n._directedSelfLoopCount++)),n.multi?f.attachMulti():f.attach(),i?n._undirectedSize++:n._directedSize++,w.key=r,n.emit("edgeAdded",w),[r,!0,x,v]}function I(n,e){n._edges.delete(e.key);let{source:t,target:i,attributes:r}=e,o=e.undirected,s=t===i;o?(t.undirectedDegree--,i.undirectedDegree--,s&&(t.undirectedLoops--,n._undirectedSelfLoopCount--)):(t.outDegree--,i.inDegree--,s&&(t.directedLoops--,n._directedSelfLoopCount--)),n.multi?e.detachMulti():e.detach(),o?n._undirectedSize--:n._directedSize--,n.emit("edgeDropped",{key:e.key,attributes:r,source:t.key,target:i.key,undirected:o})}var b=class n extends be.EventEmitter{constructor(e){if(super(),e=E({},Yt,e),typeof e.multi!="boolean")throw new l(`Graph.constructor: invalid 'multi' option. Expecting a boolean but got "${e.multi}".`);if(!Ft.has(e.type))throw new l(`Graph.constructor: invalid 'type' option. Should be one of "mixed", "directed" or "undirected" but got "${e.type}".`);if(typeof e.allowSelfLoops!="boolean")throw new l(`Graph.constructor: invalid 'allowSelfLoops' option. Expecting a boolean but got "${e.allowSelfLoops}".`);let t=e.type==="mixed"?ve:e.type==="directed"?xe:ke;A(this,"NodeDataClass",t);let i="geid_"+zt()+"_",r=0,o=()=>{let s;do s=i+r++;while(this._edges.has(s));return s};A(this,"_attributes",{}),A(this,"_nodes",new Map),A(this,"_edges",new Map),A(this,"_directedSize",0),A(this,"_undirectedSize",0),A(this,"_directedSelfLoopCount",0),A(this,"_undirectedSelfLoopCount",0),A(this,"_edgeKeyGenerator",o),A(this,"_options",e),we.forEach(s=>A(this,s,this[s])),N(this,"order",()=>this._nodes.size),N(this,"size",()=>this._edges.size),N(this,"directedSize",()=>this._directedSize),N(this,"undirectedSize",()=>this._undirectedSize),N(this,"selfLoopCount",()=>this._directedSelfLoopCount+this._undirectedSelfLoopCount),N(this,"directedSelfLoopCount",()=>this._directedSelfLoopCount),N(this,"undirectedSelfLoopCount",()=>this._undirectedSelfLoopCount),N(this,"multi",this._options.multi),N(this,"type",this._options.type),N(this,"allowSelfLoops",this._options.allowSelfLoops),N(this,"implementation",()=>"graphology")}_resetInstanceCounters(){this._directedSize=0,this._undirectedSize=0,this._directedSelfLoopCount=0,this._undirectedSelfLoopCount=0}hasNode(e){return this._nodes.has(""+e)}hasDirectedEdge(e,t){if(this.type==="undirected")return!1;if(arguments.length===1){let i=""+e,r=this._edges.get(i);return!!r&&!r.undirected}else if(arguments.length===2){e=""+e,t=""+t;let i=this._nodes.get(e);return i?i.out.hasOwnProperty(t):!1}throw new l(`Graph.hasDirectedEdge: invalid arity (${arguments.length}, instead of 1 or 2). You can either ask for an edge id or for the existence of an edge between a source & a target.`)}hasUndirectedEdge(e,t){if(this.type==="directed")return!1;if(arguments.length===1){let i=""+e,r=this._edges.get(i);return!!r&&r.undirected}else if(arguments.length===2){e=""+e,t=""+t;let i=this._nodes.get(e);return i?i.undirected.hasOwnProperty(t):!1}throw new l(`Graph.hasDirectedEdge: invalid arity (${arguments.length}, instead of 1 or 2). You can either ask for an edge id or for the existence of an edge between a source & a target.`)}hasEdge(e,t){if(arguments.length===1){let i=""+e;return this._edges.has(i)}else if(arguments.length===2){e=""+e,t=""+t;let i=this._nodes.get(e);return i?typeof i.out<"u"&&i.out.hasOwnProperty(t)||typeof i.undirected<"u"&&i.undirected.hasOwnProperty(t):!1}throw new l(`Graph.hasEdge: invalid arity (${arguments.length}, instead of 1 or 2). You can either ask for an edge id or for the existence of an edge between a source & a target.`)}directedEdge(e,t){if(this.type==="undirected")return;if(e=""+e,t=""+t,this.multi)throw new y("Graph.directedEdge: this method is irrelevant with multigraphs since there might be multiple edges between source & target. See #.directedEdges instead.");let i=this._nodes.get(e);if(!i)throw new p(`Graph.directedEdge: could not find the "${e}" source node in the graph.`);if(!this._nodes.has(t))throw new p(`Graph.directedEdge: could not find the "${t}" target node in the graph.`);let r=i.out&&i.out[t]||void 0;if(r)return r.key}undirectedEdge(e,t){if(this.type==="directed")return;if(e=""+e,t=""+t,this.multi)throw new y("Graph.undirectedEdge: this method is irrelevant with multigraphs since there might be multiple edges between source & target. See #.undirectedEdges instead.");let i=this._nodes.get(e);if(!i)throw new p(`Graph.undirectedEdge: could not find the "${e}" source node in the graph.`);if(!this._nodes.has(t))throw new p(`Graph.undirectedEdge: could not find the "${t}" target node in the graph.`);let r=i.undirected&&i.undirected[t]||void 0;if(r)return r.key}edge(e,t){if(this.multi)throw new y("Graph.edge: this method is irrelevant with multigraphs since there might be multiple edges between source & target. See #.edges instead.");e=""+e,t=""+t;let i=this._nodes.get(e);if(!i)throw new p(`Graph.edge: could not find the "${e}" source node in the graph.`);if(!this._nodes.has(t))throw new p(`Graph.edge: could not find the "${t}" target node in the graph.`);let r=i.out&&i.out[t]||i.undirected&&i.undirected[t]||void 0;if(r)return r.key}areDirectedNeighbors(e,t){e=""+e,t=""+t;let i=this._nodes.get(e);if(!i)throw new p(`Graph.areDirectedNeighbors: could not find the "${e}" node in the graph.`);return this.type==="undirected"?!1:t in i.in||t in i.out}areOutNeighbors(e,t){e=""+e,t=""+t;let i=this._nodes.get(e);if(!i)throw new p(`Graph.areOutNeighbors: could not find the "${e}" node in the graph.`);return this.type==="undirected"?!1:t in i.out}areInNeighbors(e,t){e=""+e,t=""+t;let i=this._nodes.get(e);if(!i)throw new p(`Graph.areInNeighbors: could not find the "${e}" node in the graph.`);return this.type==="undirected"?!1:t in i.in}areUndirectedNeighbors(e,t){e=""+e,t=""+t;let i=this._nodes.get(e);if(!i)throw new p(`Graph.areUndirectedNeighbors: could not find the "${e}" node in the graph.`);return this.type==="directed"?!1:t in i.undirected}areNeighbors(e,t){e=""+e,t=""+t;let i=this._nodes.get(e);if(!i)throw new p(`Graph.areNeighbors: could not find the "${e}" node in the graph.`);return this.type!=="undirected"&&(t in i.in||t in i.out)||this.type!=="directed"&&t in i.undirected}areInboundNeighbors(e,t){e=""+e,t=""+t;let i=this._nodes.get(e);if(!i)throw new p(`Graph.areInboundNeighbors: could not find the "${e}" node in the graph.`);return this.type!=="undirected"&&t in i.in||this.type!=="directed"&&t in i.undirected}areOutboundNeighbors(e,t){e=""+e,t=""+t;let i=this._nodes.get(e);if(!i)throw new p(`Graph.areOutboundNeighbors: could not find the "${e}" node in the graph.`);return this.type!=="undirected"&&t in i.out||this.type!=="directed"&&t in i.undirected}inDegree(e){e=""+e;let t=this._nodes.get(e);if(!t)throw new p(`Graph.inDegree: could not find the "${e}" node in the graph.`);return this.type==="undirected"?0:t.inDegree}outDegree(e){e=""+e;let t=this._nodes.get(e);if(!t)throw new p(`Graph.outDegree: could not find the "${e}" node in the graph.`);return this.type==="undirected"?0:t.outDegree}directedDegree(e){e=""+e;let t=this._nodes.get(e);if(!t)throw new p(`Graph.directedDegree: could not find the "${e}" node in the graph.`);return this.type==="undirected"?0:t.inDegree+t.outDegree}undirectedDegree(e){e=""+e;let t=this._nodes.get(e);if(!t)throw new p(`Graph.undirectedDegree: could not find the "${e}" node in the graph.`);return this.type==="directed"?0:t.undirectedDegree}inboundDegree(e){e=""+e;let t=this._nodes.get(e);if(!t)throw new p(`Graph.inboundDegree: could not find the "${e}" node in the graph.`);let i=0;return this.type!=="directed"&&(i+=t.undirectedDegree),this.type!=="undirected"&&(i+=t.inDegree),i}outboundDegree(e){e=""+e;let t=this._nodes.get(e);if(!t)throw new p(`Graph.outboundDegree: could not find the "${e}" node in the graph.`);let i=0;return this.type!=="directed"&&(i+=t.undirectedDegree),this.type!=="undirected"&&(i+=t.outDegree),i}degree(e){e=""+e;let t=this._nodes.get(e);if(!t)throw new p(`Graph.degree: could not find the "${e}" node in the graph.`);let i=0;return this.type!=="directed"&&(i+=t.undirectedDegree),this.type!=="undirected"&&(i+=t.inDegree+t.outDegree),i}inDegreeWithoutSelfLoops(e){e=""+e;let t=this._nodes.get(e);if(!t)throw new p(`Graph.inDegreeWithoutSelfLoops: could not find the "${e}" node in the graph.`);return this.type==="undirected"?0:t.inDegree-t.directedLoops}outDegreeWithoutSelfLoops(e){e=""+e;let t=this._nodes.get(e);if(!t)throw new p(`Graph.outDegreeWithoutSelfLoops: could not find the "${e}" node in the graph.`);return this.type==="undirected"?0:t.outDegree-t.directedLoops}directedDegreeWithoutSelfLoops(e){e=""+e;let t=this._nodes.get(e);if(!t)throw new p(`Graph.directedDegreeWithoutSelfLoops: could not find the "${e}" node in the graph.`);return this.type==="undirected"?0:t.inDegree+t.outDegree-t.directedLoops*2}undirectedDegreeWithoutSelfLoops(e){e=""+e;let t=this._nodes.get(e);if(!t)throw new p(`Graph.undirectedDegreeWithoutSelfLoops: could not find the "${e}" node in the graph.`);return this.type==="directed"?0:t.undirectedDegree-t.undirectedLoops*2}inboundDegreeWithoutSelfLoops(e){e=""+e;let t=this._nodes.get(e);if(!t)throw new p(`Graph.inboundDegreeWithoutSelfLoops: could not find the "${e}" node in the graph.`);let i=0,r=0;return this.type!=="directed"&&(i+=t.undirectedDegree,r+=t.undirectedLoops*2),this.type!=="undirected"&&(i+=t.inDegree,r+=t.directedLoops),i-r}outboundDegreeWithoutSelfLoops(e){e=""+e;let t=this._nodes.get(e);if(!t)throw new p(`Graph.outboundDegreeWithoutSelfLoops: could not find the "${e}" node in the graph.`);let i=0,r=0;return this.type!=="directed"&&(i+=t.undirectedDegree,r+=t.undirectedLoops*2),this.type!=="undirected"&&(i+=t.outDegree,r+=t.directedLoops),i-r}degreeWithoutSelfLoops(e){e=""+e;let t=this._nodes.get(e);if(!t)throw new p(`Graph.degreeWithoutSelfLoops: could not find the "${e}" node in the graph.`);let i=0,r=0;return this.type!=="directed"&&(i+=t.undirectedDegree,r+=t.undirectedLoops*2),this.type!=="undirected"&&(i+=t.inDegree+t.outDegree,r+=t.directedLoops*2),i-r}source(e){e=""+e;let t=this._edges.get(e);if(!t)throw new p(`Graph.source: could not find the "${e}" edge in the graph.`);return t.source.key}target(e){e=""+e;let t=this._edges.get(e);if(!t)throw new p(`Graph.target: could not find the "${e}" edge in the graph.`);return t.target.key}extremities(e){e=""+e;let t=this._edges.get(e);if(!t)throw new p(`Graph.extremities: could not find the "${e}" edge in the graph.`);return[t.source.key,t.target.key]}opposite(e,t){e=""+e,t=""+t;let i=this._edges.get(t);if(!i)throw new p(`Graph.opposite: could not find the "${t}" edge in the graph.`);let r=i.source.key,o=i.target.key;if(e===r)return o;if(e===o)return r;throw new p(`Graph.opposite: the "${e}" node is not attached to the "${t}" edge (${r}, ${o}).`)}hasExtremity(e,t){e=""+e,t=""+t;let i=this._edges.get(e);if(!i)throw new p(`Graph.hasExtremity: could not find the "${e}" edge in the graph.`);return i.source.key===t||i.target.key===t}isUndirected(e){e=""+e;let t=this._edges.get(e);if(!t)throw new p(`Graph.isUndirected: could not find the "${e}" edge in the graph.`);return t.undirected}isDirected(e){e=""+e;let t=this._edges.get(e);if(!t)throw new p(`Graph.isDirected: could not find the "${e}" edge in the graph.`);return!t.undirected}isSelfLoop(e){e=""+e;let t=this._edges.get(e);if(!t)throw new p(`Graph.isSelfLoop: could not find the "${e}" edge in the graph.`);return t.source===t.target}addNode(e,t){return Ht(this,e,t).key}mergeNode(e,t){if(t&&!G(t))throw new l(`Graph.mergeNode: invalid attributes. Expecting an object but got "${t}"`);e=""+e,t=t||{};let i=this._nodes.get(e);return i?(t&&(E(i.attributes,t),this.emit("nodeAttributesUpdated",{type:"merge",key:e,attributes:i.attributes,data:t})),[e,!1]):(i=new this.NodeDataClass(e,t),this._nodes.set(e,i),this.emit("nodeAdded",{key:e,attributes:t}),[e,!0])}updateNode(e,t){if(t&&typeof t!="function")throw new l(`Graph.updateNode: invalid updater function. Expecting a function but got "${t}"`);e=""+e;let i=this._nodes.get(e);if(i){if(t){let o=i.attributes;i.attributes=t(o),this.emit("nodeAttributesUpdated",{type:"replace",key:e,attributes:i.attributes})}return[e,!1]}let r=t?t({}):{};return i=new this.NodeDataClass(e,r),this._nodes.set(e,i),this.emit("nodeAdded",{key:e,attributes:r}),[e,!0]}dropNode(e){e=""+e;let t=this._nodes.get(e);if(!t)throw new p(`Graph.dropNode: could not find the "${e}" node in the graph.`);let i;if(this.type!=="undirected"){for(let r in t.out){i=t.out[r];do I(this,i),i=i.next;while(i)}for(let r in t.in){i=t.in[r];do I(this,i),i=i.next;while(i)}}if(this.type!=="directed")for(let r in t.undirected){i=t.undirected[r];do I(this,i),i=i.next;while(i)}this._nodes.delete(e),this.emit("nodeDropped",{key:e,attributes:t.attributes})}dropEdge(e){let t;if(arguments.length>1){let i=""+arguments[0],r=""+arguments[1];if(t=D(this,i,r,this.type),!t)throw new p(`Graph.dropEdge: could not find the "${i}" -> "${r}" edge in the graph.`)}else if(e=""+e,t=this._edges.get(e),!t)throw new p(`Graph.dropEdge: could not find the "${e}" edge in the graph.`);return I(this,t),this}dropDirectedEdge(e,t){if(arguments.length<2)throw new y("Graph.dropDirectedEdge: it does not make sense to try and drop a directed edge by key. What if the edge with this key is undirected? Use #.dropEdge for this purpose instead.");if(this.multi)throw new y("Graph.dropDirectedEdge: cannot use a {source,target} combo when dropping an edge in a MultiGraph since we cannot infer the one you want to delete as there could be multiple ones.");e=""+e,t=""+t;let i=D(this,e,t,"directed");if(!i)throw new p(`Graph.dropDirectedEdge: could not find a "${e}" -> "${t}" edge in the graph.`);return I(this,i),this}dropUndirectedEdge(e,t){if(arguments.length<2)throw new y("Graph.dropUndirectedEdge: it does not make sense to drop a directed edge by key. What if the edge with this key is undirected? Use #.dropEdge for this purpose instead.");if(this.multi)throw new y("Graph.dropUndirectedEdge: cannot use a {source,target} combo when dropping an edge in a MultiGraph since we cannot infer the one you want to delete as there could be multiple ones.");let i=D(this,e,t,"undirected");if(!i)throw new p(`Graph.dropUndirectedEdge: could not find a "${e}" -> "${t}" edge in the graph.`);return I(this,i),this}clear(){this._edges.clear(),this._nodes.clear(),this._resetInstanceCounters(),this.emit("cleared")}clearEdges(){let e=this._nodes.values(),t;for(;t=e.next(),t.done!==!0;)t.value.clear();this._edges.clear(),this._resetInstanceCounters(),this.emit("edgesCleared")}getAttribute(e){return this._attributes[e]}getAttributes(){return this._attributes}hasAttribute(e){return this._attributes.hasOwnProperty(e)}setAttribute(e,t){return this._attributes[e]=t,this.emit("attributesUpdated",{type:"set",attributes:this._attributes,name:e}),this}updateAttribute(e,t){if(typeof t!="function")throw new l("Graph.updateAttribute: updater should be a function.");let i=this._attributes[e];return this._attributes[e]=t(i),this.emit("attributesUpdated",{type:"set",attributes:this._attributes,name:e}),this}removeAttribute(e){return delete this._attributes[e],this.emit("attributesUpdated",{type:"remove",attributes:this._attributes,name:e}),this}replaceAttributes(e){if(!G(e))throw new l("Graph.replaceAttributes: provided attributes are not a plain object.");return this._attributes=e,this.emit("attributesUpdated",{type:"replace",attributes:this._attributes}),this}mergeAttributes(e){if(!G(e))throw new l("Graph.mergeAttributes: provided attributes are not a plain object.");return E(this._attributes,e),this.emit("attributesUpdated",{type:"merge",attributes:this._attributes,data:e}),this}updateAttributes(e){if(typeof e!="function")throw new l("Graph.updateAttributes: provided updater is not a function.");return this._attributes=e(this._attributes),this.emit("attributesUpdated",{type:"update",attributes:this._attributes}),this}updateEachNodeAttributes(e,t){if(typeof e!="function")throw new l("Graph.updateEachNodeAttributes: expecting an updater function.");if(t&&!ye(t))throw new l("Graph.updateEachNodeAttributes: invalid hints. Expecting an object having the following shape: {attributes?: [string]}");let i=this._nodes.values(),r,o;for(;r=i.next(),r.done!==!0;)o=r.value,o.attributes=e(o.key,o.attributes);this.emit("eachNodeAttributesUpdated",{hints:t||null})}updateEachEdgeAttributes(e,t){if(typeof e!="function")throw new l("Graph.updateEachEdgeAttributes: expecting an updater function.");if(t&&!ye(t))throw new l("Graph.updateEachEdgeAttributes: invalid hints. Expecting an object having the following shape: {attributes?: [string]}");let i=this._edges.values(),r,o,s,a;for(;r=i.next(),r.done!==!0;)o=r.value,s=o.source,a=o.target,o.attributes=e(o.key,o.attributes,s.key,a.key,s.attributes,a.attributes,o.undirected);this.emit("eachEdgeAttributesUpdated",{hints:t||null})}forEachAdjacencyEntry(e){if(typeof e!="function")throw new l("Graph.forEachAdjacencyEntry: expecting a callback.");F(!1,!1,!1,this,e)}forEachAdjacencyEntryWithOrphans(e){if(typeof e!="function")throw new l("Graph.forEachAdjacencyEntryWithOrphans: expecting a callback.");F(!1,!1,!0,this,e)}forEachAssymetricAdjacencyEntry(e){if(typeof e!="function")throw new l("Graph.forEachAssymetricAdjacencyEntry: expecting a callback.");F(!1,!0,!1,this,e)}forEachAssymetricAdjacencyEntryWithOrphans(e){if(typeof e!="function")throw new l("Graph.forEachAssymetricAdjacencyEntryWithOrphans: expecting a callback.");F(!1,!0,!0,this,e)}nodes(){return Array.from(this._nodes.keys())}forEachNode(e){if(typeof e!="function")throw new l("Graph.forEachNode: expecting a callback.");let t=this._nodes.values(),i,r;for(;i=t.next(),i.done!==!0;)r=i.value,e(r.key,r.attributes)}findNode(e){if(typeof e!="function")throw new l("Graph.findNode: expecting a callback.");let t=this._nodes.values(),i,r;for(;i=t.next(),i.done!==!0;)if(r=i.value,e(r.key,r.attributes))return r.key}mapNodes(e){if(typeof e!="function")throw new l("Graph.mapNode: expecting a callback.");let t=this._nodes.values(),i,r,o=new Array(this.order),s=0;for(;i=t.next(),i.done!==!0;)r=i.value,o[s++]=e(r.key,r.attributes);return o}someNode(e){if(typeof e!="function")throw new l("Graph.someNode: expecting a callback.");let t=this._nodes.values(),i,r;for(;i=t.next(),i.done!==!0;)if(r=i.value,e(r.key,r.attributes))return!0;return!1}everyNode(e){if(typeof e!="function")throw new l("Graph.everyNode: expecting a callback.");let t=this._nodes.values(),i,r;for(;i=t.next(),i.done!==!0;)if(r=i.value,!e(r.key,r.attributes))return!1;return!0}filterNodes(e){if(typeof e!="function")throw new l("Graph.filterNodes: expecting a callback.");let t=this._nodes.values(),i,r,o=[];for(;i=t.next(),i.done!==!0;)r=i.value,e(r.key,r.attributes)&&o.push(r.key);return o}reduceNodes(e,t){if(typeof e!="function")throw new l("Graph.reduceNodes: expecting a callback.");if(arguments.length<2)throw new l("Graph.reduceNodes: missing initial value. You must provide it because the callback takes more than one argument and we cannot infer the initial value from the first iteration, as you could with a simple array.");let i=t,r=this._nodes.values(),o,s;for(;o=r.next(),o.done!==!0;)s=o.value,i=e(i,s.key,s.attributes);return i}nodeEntries(){let e=this._nodes.values();return{[Symbol.iterator](){return this},next(){let t=e.next();if(t.done)return t;let i=t.value;return{value:{node:i.key,attributes:i.attributes},done:!1}}}}export(){let e=new Array(this._nodes.size),t=0;this._nodes.forEach((r,o)=>{e[t++]=jt(o,r)});let i=new Array(this._edges.size);return t=0,this._edges.forEach((r,o)=>{i[t++]=Kt(this.type,o,r)}),{options:{type:this.type,multi:this.multi,allowSelfLoops:this.allowSelfLoops},attributes:this.getAttributes(),nodes:e,edges:i}}import(e,t=!1){if(e instanceof n)return e.forEachNode((d,u)=>{t?this.mergeNode(d,u):this.addNode(d,u)}),e.forEachEdge((d,u,h,c,f,g,w)=>{t?w?this.mergeUndirectedEdgeWithKey(d,h,c,u):this.mergeDirectedEdgeWithKey(d,h,c,u):w?this.addUndirectedEdgeWithKey(d,h,c,u):this.addDirectedEdgeWithKey(d,h,c,u)}),this;if(!G(e))throw new l("Graph.import: invalid argument. Expecting a serialized graph or, alternatively, a Graph instance.");if(e.attributes){if(!G(e.attributes))throw new l("Graph.import: invalid attributes. Expecting a plain object.");t?this.mergeAttributes(e.attributes):this.replaceAttributes(e.attributes)}let i,r,o,s,a;if(e.nodes){if(o=e.nodes,!Array.isArray(o))throw new l("Graph.import: invalid nodes. Expecting an array.");for(i=0,r=o.length;i<r;i++){s=o[i],Rt(s);let{key:d,attributes:u}=s;t?this.mergeNode(d,u):this.addNode(d,u)}}if(e.edges){let d=!1;if(this.type==="undirected"&&(d=!0),o=e.edges,!Array.isArray(o))throw new l("Graph.import: invalid edges. Expecting an array.");for(i=0,r=o.length;i<r;i++){a=o[i],Pt(a);let{source:u,target:h,attributes:c,undirected:f=d}=a,g;"key"in a?(g=t?f?this.mergeUndirectedEdgeWithKey:this.mergeDirectedEdgeWithKey:f?this.addUndirectedEdgeWithKey:this.addDirectedEdgeWithKey,g.call(this,a.key,u,h,c)):(g=t?f?this.mergeUndirectedEdge:this.mergeDirectedEdge:f?this.addUndirectedEdge:this.addDirectedEdge,g.call(this,u,h,c))}}return this}nullCopy(e){let t=new n(E({},this._options,e));return t.replaceAttributes(E({},this.getAttributes())),t}emptyCopy(e){let t=this.nullCopy(e);return this._nodes.forEach((i,r)=>{let o=E({},i.attributes);i=new t.NodeDataClass(r,o),t._nodes.set(r,i)}),t}copy(e){if(e=e||{},typeof e.type=="string"&&e.type!==this.type&&e.type!=="mixed")throw new y(`Graph.copy: cannot create an incompatible copy from "${this.type}" type to "${e.type}" because this would mean losing information about the current graph.`);if(typeof e.multi=="boolean"&&e.multi!==this.multi&&e.multi!==!0)throw new y("Graph.copy: cannot create an incompatible copy by downgrading a multi graph to a simple one because this would mean losing information about the current graph.");if(typeof e.allowSelfLoops=="boolean"&&e.allowSelfLoops!==this.allowSelfLoops&&e.allowSelfLoops!==!0)throw new y("Graph.copy: cannot create an incompatible copy from a graph allowing self loops to one that does not because this would mean losing information about the current graph.");let t=this.emptyCopy(e),i=this._edges.values(),r,o;for(;r=i.next(),r.done!==!0;)o=r.value,De(t,"copy",!1,o.undirected,o.key,o.source.key,o.target.key,E({},o.attributes));return t}toJSON(){return this.export()}toString(){return"[object Graph]"}inspect(){let e={};this._nodes.forEach((o,s)=>{e[s]=o.attributes});let t={},i={};this._edges.forEach((o,s)=>{let a=o.undirected?"--":"->",d="",u=o.source.key,h=o.target.key,c;o.undirected&&u>h&&(c=u,u=h,h=c);let f=`(${u})${a}(${h})`;s.startsWith("geid_")?this.multi&&(typeof i[f]>"u"?i[f]=0:i[f]++,d+=`${i[f]}. `):d+=`[${s}]: `,d+=f,t[d]=o.attributes});let r={};for(let o in this)this.hasOwnProperty(o)&&!we.has(o)&&typeof this[o]!="function"&&typeof o!="symbol"&&(r[o]=this[o]);return r.attributes=this._attributes,r.nodes=e,r.edges=t,A(r,"constructor",this.constructor),r}};typeof Symbol<"u"&&(b.prototype[Symbol.for("nodejs.util.inspect.custom")]=b.prototype.inspect);Bt.forEach(n=>{["add","merge","update"].forEach(e=>{let t=n.name(e),i=e==="add"?De:Xt;n.generateKey?b.prototype[t]=function(r,o,s){return i(this,t,!0,(n.type||this.type)==="undirected",null,r,o,s,e==="update")}:b.prototype[t]=function(r,o,s,a){return i(this,t,!1,(n.type||this.type)==="undirected",r,o,s,a,e==="update")}})});nt(b);lt(b);Lt(b);Wt(b);var C=class extends b{constructor(e){let t=E({type:"directed"},e);if("multi"in t&&t.multi!==!1)throw new l("DirectedGraph.from: inconsistent indication that the graph should be multi in given options!");if(t.type!=="directed")throw new l('DirectedGraph.from: inconsistent "'+t.type+'" type in given options!');super(t)}},B=class extends b{constructor(e){let t=E({type:"undirected"},e);if("multi"in t&&t.multi!==!1)throw new l("UndirectedGraph.from: inconsistent indication that the graph should be multi in given options!");if(t.type!=="undirected")throw new l('UndirectedGraph.from: inconsistent "'+t.type+'" type in given options!');super(t)}},Y=class extends b{constructor(e){let t=E({multi:!0},e);if("multi"in t&&t.multi!==!0)throw new l("MultiGraph.from: inconsistent indication that the graph should be simple in given options!");super(t)}},H=class extends b{constructor(e){let t=E({type:"directed",multi:!0},e);if("multi"in t&&t.multi!==!0)throw new l("MultiDirectedGraph.from: inconsistent indication that the graph should be simple in given options!");if(t.type!=="directed")throw new l('MultiDirectedGraph.from: inconsistent "'+t.type+'" type in given options!');super(t)}},X=class extends b{constructor(e){let t=E({type:"undirected",multi:!0},e);if("multi"in t&&t.multi!==!0)throw new l("MultiUndirectedGraph.from: inconsistent indication that the graph should be simple in given options!");if(t.type!=="undirected")throw new l('MultiUndirectedGraph.from: inconsistent "'+t.type+'" type in given options!');super(t)}};function W(n){n.from=function(e,t){let i=E({},e.options,t),r=new n(i);return r.import(e),r}}W(b);W(C);W(B);W(Y);W(H);W(X);b.Graph=b;b.DirectedGraph=C;b.UndirectedGraph=B;b.MultiGraph=Y;b.MultiDirectedGraph=H;b.MultiUndirectedGraph=X;b.InvalidArgumentsGraphError=l;b.NotFoundGraphError=p;b.UsageGraphError=y;var J,Ne={setGraph(n){J=new C().import(n)},applyIteration(n,e){return Vt(J,{repulsion:n,neighborAttraction:e}),J.nodes().map(t=>{let i=J.getNodeAttributes(t);return{id:t,x:i.x,y:i.y}})}};function Jt(n,e,t){let i=[];for(let d=0;d<(e+1)*(t+1);d++)i.push([]);let r=1/0,o=1/0,s=-1/0,a=-1/0;for(let d of n.nodes()){let u=n.getNodeAttributes(d);r=Math.min(r,u.x),s=Math.max(s,u.x),o=Math.min(o,u.y),a=Math.max(a,u.y)}for(let d of n.nodes()){let u=n.getNodeAttributes(d),h=Math.floor((u.x-r)/(s-r)*e),c=Math.floor((u.y-o)/(a-o)*t),f=h+c*(e+1);i[f].push(d)}return{x1:r,y1:o,x2:s,y2:a,xSize:e,ySize:t,table:i,getCandidatesWithinBox(d,u,h,c){let f=[],g=Math.max(0,Math.floor((d-r)/(s-r)*e)),w=Math.max(0,Math.floor((u-o)/(a-o)*t)),x=Math.min(e+1,Math.ceil((h-r)/(s-r)*e)),v=Math.min(t+1,Math.ceil((c-o)/(a-o)*t));for(let $=w;$<v;$++)for(let k=g;k<x;k++){let _=k+$*(e+1);i[_]&&f.push(i[_])}return f}}}function Vt(n,e){let t=1/0,i=1/0,r=-1/0,o=-1/0;for(let u of n.nodes()){let h=n.getNodeAttributes(u);t=Math.min(t,h.x),r=Math.max(r,h.x),i=Math.min(i,h.y),o=Math.max(o,h.y)}console.time("a"),console.time("c");let s=Jt(n,100,100),a=50;console.timeEnd("c");let d=0;for(let u of n.nodes()){let h=n.getNodeAttributes(u),c=h.x,f=h.y,g=s.getCandidatesWithinBox(h.x-a,h.y-a,h.x+a,h.y+a);for(let w of g)for(let x of w){d++;let v=n.getNodeAttributes(x),$=v.x-h.x,k=v.y-h.y,_=Math.hypot($,k);if(_<a&&_!==0){let M=Math.min(3,50/_)*e.repulsion;c-=$/_*M,f-=k/_*M}}n.setNodeAttribute(u,"x",c),n.setNodeAttribute(u,"y",f)}console.timeEnd("a"),console.log("checked:",d/n.nodes().length),console.time("b");for(let u of n.nodes()){let h=n.inboundNeighbors(u).concat(n.outboundNeighbors(u)),c=n.getNodeAttributes(u),f=c.x,g=c.y,w=h.length;for(let x of h){let v=n.getNodeAttributes(x),$=v.x-c.x,k=v.y-c.y,_=Math.hypot($,k),M=Math.sqrt(_)*e.neighborAttraction/(w+1);_!==0&&_>a+M&&(f+=$/_*M,g+=k/_*M)}n.setNodeAttribute(u,"x",f),n.setNodeAttribute(u,"y",g)}console.timeEnd("b")}var ri=re(Ne,"graph",n=>{let e=t=>{n(t.data)};return self.addEventListener("message",e),()=>self.removeEventListener("message",e)},n=>{self.postMessage(n)});})();
//# sourceMappingURL=wiki-article-graph-worker.js.map
