"use strict";(()=>{var Te=Object.create;var se=Object.defineProperty;var We=Object.getOwnPropertyDescriptor;var je=Object.getOwnPropertyNames;var Re=Object.getPrototypeOf,Ke=Object.prototype.hasOwnProperty;var Pe=(i,e)=>()=>(e||i((e={exports:{}}).exports,e),e.exports);var ze=(i,e,t,n)=>{if(e&&typeof e=="object"||typeof e=="function")for(let r of je(e))!Ke.call(i,r)&&r!==t&&se(i,r,{get:()=>e[r],enumerable:!(n=We(e,r))||n.enumerable});return i};var Fe=(i,e,t)=>(t=i!=null?Te(Re(i)):{},ze(e||!i||!i.__esModule?se(t,"default",{value:i,enumerable:!0}):t,i));var me=Pe((an,q)=>{"use strict";var U=typeof Reflect=="object"?Reflect:null,ue=U&&typeof U.apply=="function"?U.apply:function(e,t,n){return Function.prototype.apply.call(e,t,n)},B;U&&typeof U.ownKeys=="function"?B=U.ownKeys:Object.getOwnPropertySymbols?B=function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:B=function(e){return Object.getOwnPropertyNames(e)};function Be(i){console&&console.warn&&console.warn(i)}var he=Number.isNaN||function(e){return e!==e};function m(){m.init.call(this)}q.exports=m;q.exports.once=He;m.EventEmitter=m;m.prototype._events=void 0;m.prototype._eventsCount=0;m.prototype._maxListeners=void 0;var de=10;function Y(i){if(typeof i!="function")throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof i)}Object.defineProperty(m,"defaultMaxListeners",{enumerable:!0,get:function(){return de},set:function(i){if(typeof i!="number"||i<0||he(i))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+i+".");de=i}});m.init=function(){(this._events===void 0||this._events===Object.getPrototypeOf(this)._events)&&(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0};m.prototype.setMaxListeners=function(e){if(typeof e!="number"||e<0||he(e))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+e+".");return this._maxListeners=e,this};function ce(i){return i._maxListeners===void 0?m.defaultMaxListeners:i._maxListeners}m.prototype.getMaxListeners=function(){return ce(this)};m.prototype.emit=function(e){for(var t=[],n=1;n<arguments.length;n++)t.push(arguments[n]);var r=e==="error",o=this._events;if(o!==void 0)r=r&&o.error===void 0;else if(!r)return!1;if(r){var s;if(t.length>0&&(s=t[0]),s instanceof Error)throw s;var a=new Error("Unhandled error."+(s?" ("+s.message+")":""));throw a.context=s,a}var u=o[e];if(u===void 0)return!1;if(typeof u=="function")ue(u,this,t);else for(var d=u.length,c=ye(u,d),n=0;n<d;++n)ue(c[n],this,t);return!0};function fe(i,e,t,n){var r,o,s;if(Y(t),o=i._events,o===void 0?(o=i._events=Object.create(null),i._eventsCount=0):(o.newListener!==void 0&&(i.emit("newListener",e,t.listener?t.listener:t),o=i._events),s=o[e]),s===void 0)s=o[e]=t,++i._eventsCount;else if(typeof s=="function"?s=o[e]=n?[t,s]:[s,t]:n?s.unshift(t):s.push(t),r=ce(i),r>0&&s.length>r&&!s.warned){s.warned=!0;var a=new Error("Possible EventEmitter memory leak detected. "+s.length+" "+String(e)+" listeners added. Use emitter.setMaxListeners() to increase limit");a.name="MaxListenersExceededWarning",a.emitter=i,a.type=e,a.count=s.length,Be(a)}return i}m.prototype.addListener=function(e,t){return fe(this,e,t,!1)};m.prototype.on=m.prototype.addListener;m.prototype.prependListener=function(e,t){return fe(this,e,t,!0)};function Ye(){if(!this.fired)return this.target.removeListener(this.type,this.wrapFn),this.fired=!0,arguments.length===0?this.listener.call(this.target):this.listener.apply(this.target,arguments)}function pe(i,e,t){var n={fired:!1,wrapFn:void 0,target:i,type:e,listener:t},r=Ye.bind(n);return r.listener=t,n.wrapFn=r,r}m.prototype.once=function(e,t){return Y(t),this.on(e,pe(this,e,t)),this};m.prototype.prependOnceListener=function(e,t){return Y(t),this.prependListener(e,pe(this,e,t)),this};m.prototype.removeListener=function(e,t){var n,r,o,s,a;if(Y(t),r=this._events,r===void 0)return this;if(n=r[e],n===void 0)return this;if(n===t||n.listener===t)--this._eventsCount===0?this._events=Object.create(null):(delete r[e],r.removeListener&&this.emit("removeListener",e,n.listener||t));else if(typeof n!="function"){for(o=-1,s=n.length-1;s>=0;s--)if(n[s]===t||n[s].listener===t){a=n[s].listener,o=s;break}if(o<0)return this;o===0?n.shift():Qe(n,o),n.length===1&&(r[e]=n[0]),r.removeListener!==void 0&&this.emit("removeListener",e,a||t)}return this};m.prototype.off=m.prototype.removeListener;m.prototype.removeAllListeners=function(e){var t,n,r;if(n=this._events,n===void 0)return this;if(n.removeListener===void 0)return arguments.length===0?(this._events=Object.create(null),this._eventsCount=0):n[e]!==void 0&&(--this._eventsCount===0?this._events=Object.create(null):delete n[e]),this;if(arguments.length===0){var o=Object.keys(n),s;for(r=0;r<o.length;++r)s=o[r],s!=="removeListener"&&this.removeAllListeners(s);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if(t=n[e],typeof t=="function")this.removeListener(e,t);else if(t!==void 0)for(r=t.length-1;r>=0;r--)this.removeListener(e,t[r]);return this};function le(i,e,t){var n=i._events;if(n===void 0)return[];var r=n[e];return r===void 0?[]:typeof r=="function"?t?[r.listener||r]:[r]:t?Xe(r):ye(r,r.length)}m.prototype.listeners=function(e){return le(this,e,!0)};m.prototype.rawListeners=function(e){return le(this,e,!1)};m.listenerCount=function(i,e){return typeof i.listenerCount=="function"?i.listenerCount(e):ge.call(i,e)};m.prototype.listenerCount=ge;function ge(i){var e=this._events;if(e!==void 0){var t=e[i];if(typeof t=="function")return 1;if(t!==void 0)return t.length}return 0}m.prototype.eventNames=function(){return this._eventsCount>0?B(this._events):[]};function ye(i,e){for(var t=new Array(e),n=0;n<e;++n)t[n]=i[n];return t}function Qe(i,e){for(;e+1<i.length;e++)i[e]=i[e+1];i.pop()}function Xe(i){for(var e=new Array(i.length),t=0;t<e.length;++t)e[t]=i[t].listener||i[t];return e}function He(i,e){return new Promise(function(t,n){function r(s){i.removeListener(e,o),n(s)}function o(){typeof i.removeListener=="function"&&i.removeListener("error",r),t([].slice.call(arguments))}we(i,e,o,{once:!0}),e!=="error"&&Je(i,r,{once:!0})})}function Je(i,e,t){typeof i.on=="function"&&we(i,"error",e,t)}function we(i,e,t,n){if(typeof i.on=="function")n.once?i.once(e,t):i.on(e,t);else if(typeof i.addEventListener=="function")i.addEventListener(e,function r(o){n.once&&i.removeEventListener(e,r),t(o)});else throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type '+typeof i)}});function ae(i,e,t,n){let r=i;return{unsub:t(async s=>{if(!s||s._discriminator!==e)return;let a=s,u=await r[a.type](...a.contents);n({contents:u,_discriminator:e,id:a.id})}),setInterface(s){r=s}}}var xe=Fe(me(),1);function Ve(){let i=arguments[0];for(let e=1,t=arguments.length;e<t;e++)if(arguments[e])for(let n in arguments[e])i[n]=arguments[e][n];return i}var k=Ve;typeof Object.assign=="function"&&(k=Object.assign);function D(i,e,t,n){let r=i._nodes.get(e),o=null;return r&&(n==="mixed"?o=r.out&&r.out[t]||r.undirected&&r.undirected[t]:n==="directed"?o=r.out&&r.out[t]:o=r.undirected&&r.undirected[t]),o}function _(i){return typeof i=="object"&&i!==null}function ke(i){let e;for(e in i)return!1;return!0}function A(i,e,t){Object.defineProperty(i,e,{enumerable:!1,configurable:!1,writable:!0,value:t})}function N(i,e,t){let n={enumerable:!0,configurable:!0};typeof t=="function"?n.get=t:(n.value=t,n.writable=!1),Object.defineProperty(i,e,n)}function be(i){return!(!_(i)||i.attributes&&!Array.isArray(i.attributes))}function Ze(){let i=Math.floor(Math.random()*256)&255;return()=>i++}function L(){let i=arguments,e=null,t=-1;return{[Symbol.iterator](){return this},next(){let n=null;do{if(e===null){if(t++,t>=i.length)return{done:!0};e=i[t][Symbol.iterator]()}if(n=e.next(),n.done){e=null;continue}break}while(!0);return n}}}function O(){return{[Symbol.iterator](){return this},next(){return{done:!0}}}}var F=class extends Error{constructor(e){super(),this.name="GraphError",this.message=e}},l=class i extends F{constructor(e){super(e),this.name="InvalidArgumentsGraphError",typeof Error.captureStackTrace=="function"&&Error.captureStackTrace(this,i.prototype.constructor)}},p=class i extends F{constructor(e){super(e),this.name="NotFoundGraphError",typeof Error.captureStackTrace=="function"&&Error.captureStackTrace(this,i.prototype.constructor)}},y=class i extends F{constructor(e){super(e),this.name="UsageGraphError",typeof Error.captureStackTrace=="function"&&Error.captureStackTrace(this,i.prototype.constructor)}};function _e(i,e){this.key=i,this.attributes=e,this.clear()}_e.prototype.clear=function(){this.inDegree=0,this.outDegree=0,this.undirectedDegree=0,this.undirectedLoops=0,this.directedLoops=0,this.in={},this.out={},this.undirected={}};function Ee(i,e){this.key=i,this.attributes=e,this.clear()}Ee.prototype.clear=function(){this.inDegree=0,this.outDegree=0,this.directedLoops=0,this.in={},this.out={}};function Ge(i,e){this.key=i,this.attributes=e,this.clear()}Ge.prototype.clear=function(){this.undirectedDegree=0,this.undirectedLoops=0,this.undirected={}};function T(i,e,t,n,r){this.key=e,this.attributes=r,this.undirected=i,this.source=t,this.target=n}T.prototype.attach=function(){let i="out",e="in";this.undirected&&(i=e="undirected");let t=this.source.key,n=this.target.key;this.source[i][n]=this,!(this.undirected&&t===n)&&(this.target[e][t]=this)};T.prototype.attachMulti=function(){let i="out",e="in",t=this.source.key,n=this.target.key;this.undirected&&(i=e="undirected");let r=this.source[i],o=r[n];if(typeof o>"u"){r[n]=this,this.undirected&&t===n||(this.target[e][t]=this);return}o.previous=this,this.next=o,r[n]=this,this.target[e][t]=this};T.prototype.detach=function(){let i=this.source.key,e=this.target.key,t="out",n="in";this.undirected&&(t=n="undirected"),delete this.source[t][e],delete this.target[n][i]};T.prototype.detachMulti=function(){let i=this.source.key,e=this.target.key,t="out",n="in";this.undirected&&(t=n="undirected"),this.previous===void 0?this.next===void 0?(delete this.source[t][e],delete this.target[n][i]):(this.next.previous=void 0,this.source[t][e]=this.next,this.target[n][i]=this.next):(this.previous.next=this.next,this.next!==void 0&&(this.next.previous=this.previous))};var Ae=0,De=1,qe=2,Ne=3;function S(i,e,t,n,r,o,s){let a,u,d,c;if(n=""+n,t===Ae){if(a=i._nodes.get(n),!a)throw new p(`Graph.${e}: could not find the "${n}" node in the graph.`);d=r,c=o}else if(t===Ne){if(r=""+r,u=i._edges.get(r),!u)throw new p(`Graph.${e}: could not find the "${r}" edge in the graph.`);let h=u.source.key,f=u.target.key;if(n===h)a=u.target;else if(n===f)a=u.source;else throw new p(`Graph.${e}: the "${n}" node is not attached to the "${r}" edge (${h}, ${f}).`);d=o,c=s}else{if(u=i._edges.get(n),!u)throw new p(`Graph.${e}: could not find the "${n}" edge in the graph.`);t===De?a=u.source:a=u.target,d=r,c=o}return[a,d,c]}function et(i,e,t){i.prototype[e]=function(n,r,o){let[s,a]=S(this,e,t,n,r,o);return s.attributes[a]}}function tt(i,e,t){i.prototype[e]=function(n,r){let[o]=S(this,e,t,n,r);return o.attributes}}function nt(i,e,t){i.prototype[e]=function(n,r,o){let[s,a]=S(this,e,t,n,r,o);return s.attributes.hasOwnProperty(a)}}function it(i,e,t){i.prototype[e]=function(n,r,o,s){let[a,u,d]=S(this,e,t,n,r,o,s);return a.attributes[u]=d,this.emit("nodeAttributesUpdated",{key:a.key,type:"set",attributes:a.attributes,name:u}),this}}function rt(i,e,t){i.prototype[e]=function(n,r,o,s){let[a,u,d]=S(this,e,t,n,r,o,s);if(typeof d!="function")throw new l(`Graph.${e}: updater should be a function.`);let c=a.attributes,h=d(c[u]);return c[u]=h,this.emit("nodeAttributesUpdated",{key:a.key,type:"set",attributes:a.attributes,name:u}),this}}function ot(i,e,t){i.prototype[e]=function(n,r,o){let[s,a]=S(this,e,t,n,r,o);return delete s.attributes[a],this.emit("nodeAttributesUpdated",{key:s.key,type:"remove",attributes:s.attributes,name:a}),this}}function st(i,e,t){i.prototype[e]=function(n,r,o){let[s,a]=S(this,e,t,n,r,o);if(!_(a))throw new l(`Graph.${e}: provided attributes are not a plain object.`);return s.attributes=a,this.emit("nodeAttributesUpdated",{key:s.key,type:"replace",attributes:s.attributes}),this}}function at(i,e,t){i.prototype[e]=function(n,r,o){let[s,a]=S(this,e,t,n,r,o);if(!_(a))throw new l(`Graph.${e}: provided attributes are not a plain object.`);return k(s.attributes,a),this.emit("nodeAttributesUpdated",{key:s.key,type:"merge",attributes:s.attributes,data:a}),this}}function ut(i,e,t){i.prototype[e]=function(n,r,o){let[s,a]=S(this,e,t,n,r,o);if(typeof a!="function")throw new l(`Graph.${e}: provided updater is not a function.`);return s.attributes=a(s.attributes),this.emit("nodeAttributesUpdated",{key:s.key,type:"update",attributes:s.attributes}),this}}var dt=[{name:i=>`get${i}Attribute`,attacher:et},{name:i=>`get${i}Attributes`,attacher:tt},{name:i=>`has${i}Attribute`,attacher:nt},{name:i=>`set${i}Attribute`,attacher:it},{name:i=>`update${i}Attribute`,attacher:rt},{name:i=>`remove${i}Attribute`,attacher:ot},{name:i=>`replace${i}Attributes`,attacher:st},{name:i=>`merge${i}Attributes`,attacher:at},{name:i=>`update${i}Attributes`,attacher:ut}];function ht(i){dt.forEach(function({name:e,attacher:t}){t(i,e("Node"),Ae),t(i,e("Source"),De),t(i,e("Target"),qe),t(i,e("Opposite"),Ne)})}function ct(i,e,t){i.prototype[e]=function(n,r){let o;if(this.type!=="mixed"&&t!=="mixed"&&t!==this.type)throw new y(`Graph.${e}: cannot find this type of edges in your ${this.type} graph.`);if(arguments.length>2){if(this.multi)throw new y(`Graph.${e}: cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.`);let s=""+n,a=""+r;if(r=arguments[2],o=D(this,s,a,t),!o)throw new p(`Graph.${e}: could not find an edge for the given path ("${s}" - "${a}").`)}else{if(t!=="mixed")throw new y(`Graph.${e}: calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type.`);if(n=""+n,o=this._edges.get(n),!o)throw new p(`Graph.${e}: could not find the "${n}" edge in the graph.`)}return o.attributes[r]}}function ft(i,e,t){i.prototype[e]=function(n){let r;if(this.type!=="mixed"&&t!=="mixed"&&t!==this.type)throw new y(`Graph.${e}: cannot find this type of edges in your ${this.type} graph.`);if(arguments.length>1){if(this.multi)throw new y(`Graph.${e}: cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.`);let o=""+n,s=""+arguments[1];if(r=D(this,o,s,t),!r)throw new p(`Graph.${e}: could not find an edge for the given path ("${o}" - "${s}").`)}else{if(t!=="mixed")throw new y(`Graph.${e}: calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type.`);if(n=""+n,r=this._edges.get(n),!r)throw new p(`Graph.${e}: could not find the "${n}" edge in the graph.`)}return r.attributes}}function pt(i,e,t){i.prototype[e]=function(n,r){let o;if(this.type!=="mixed"&&t!=="mixed"&&t!==this.type)throw new y(`Graph.${e}: cannot find this type of edges in your ${this.type} graph.`);if(arguments.length>2){if(this.multi)throw new y(`Graph.${e}: cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.`);let s=""+n,a=""+r;if(r=arguments[2],o=D(this,s,a,t),!o)throw new p(`Graph.${e}: could not find an edge for the given path ("${s}" - "${a}").`)}else{if(t!=="mixed")throw new y(`Graph.${e}: calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type.`);if(n=""+n,o=this._edges.get(n),!o)throw new p(`Graph.${e}: could not find the "${n}" edge in the graph.`)}return o.attributes.hasOwnProperty(r)}}function lt(i,e,t){i.prototype[e]=function(n,r,o){let s;if(this.type!=="mixed"&&t!=="mixed"&&t!==this.type)throw new y(`Graph.${e}: cannot find this type of edges in your ${this.type} graph.`);if(arguments.length>3){if(this.multi)throw new y(`Graph.${e}: cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.`);let a=""+n,u=""+r;if(r=arguments[2],o=arguments[3],s=D(this,a,u,t),!s)throw new p(`Graph.${e}: could not find an edge for the given path ("${a}" - "${u}").`)}else{if(t!=="mixed")throw new y(`Graph.${e}: calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type.`);if(n=""+n,s=this._edges.get(n),!s)throw new p(`Graph.${e}: could not find the "${n}" edge in the graph.`)}return s.attributes[r]=o,this.emit("edgeAttributesUpdated",{key:s.key,type:"set",attributes:s.attributes,name:r}),this}}function gt(i,e,t){i.prototype[e]=function(n,r,o){let s;if(this.type!=="mixed"&&t!=="mixed"&&t!==this.type)throw new y(`Graph.${e}: cannot find this type of edges in your ${this.type} graph.`);if(arguments.length>3){if(this.multi)throw new y(`Graph.${e}: cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.`);let a=""+n,u=""+r;if(r=arguments[2],o=arguments[3],s=D(this,a,u,t),!s)throw new p(`Graph.${e}: could not find an edge for the given path ("${a}" - "${u}").`)}else{if(t!=="mixed")throw new y(`Graph.${e}: calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type.`);if(n=""+n,s=this._edges.get(n),!s)throw new p(`Graph.${e}: could not find the "${n}" edge in the graph.`)}if(typeof o!="function")throw new l(`Graph.${e}: updater should be a function.`);return s.attributes[r]=o(s.attributes[r]),this.emit("edgeAttributesUpdated",{key:s.key,type:"set",attributes:s.attributes,name:r}),this}}function yt(i,e,t){i.prototype[e]=function(n,r){let o;if(this.type!=="mixed"&&t!=="mixed"&&t!==this.type)throw new y(`Graph.${e}: cannot find this type of edges in your ${this.type} graph.`);if(arguments.length>2){if(this.multi)throw new y(`Graph.${e}: cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.`);let s=""+n,a=""+r;if(r=arguments[2],o=D(this,s,a,t),!o)throw new p(`Graph.${e}: could not find an edge for the given path ("${s}" - "${a}").`)}else{if(t!=="mixed")throw new y(`Graph.${e}: calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type.`);if(n=""+n,o=this._edges.get(n),!o)throw new p(`Graph.${e}: could not find the "${n}" edge in the graph.`)}return delete o.attributes[r],this.emit("edgeAttributesUpdated",{key:o.key,type:"remove",attributes:o.attributes,name:r}),this}}function wt(i,e,t){i.prototype[e]=function(n,r){let o;if(this.type!=="mixed"&&t!=="mixed"&&t!==this.type)throw new y(`Graph.${e}: cannot find this type of edges in your ${this.type} graph.`);if(arguments.length>2){if(this.multi)throw new y(`Graph.${e}: cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.`);let s=""+n,a=""+r;if(r=arguments[2],o=D(this,s,a,t),!o)throw new p(`Graph.${e}: could not find an edge for the given path ("${s}" - "${a}").`)}else{if(t!=="mixed")throw new y(`Graph.${e}: calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type.`);if(n=""+n,o=this._edges.get(n),!o)throw new p(`Graph.${e}: could not find the "${n}" edge in the graph.`)}if(!_(r))throw new l(`Graph.${e}: provided attributes are not a plain object.`);return o.attributes=r,this.emit("edgeAttributesUpdated",{key:o.key,type:"replace",attributes:o.attributes}),this}}function mt(i,e,t){i.prototype[e]=function(n,r){let o;if(this.type!=="mixed"&&t!=="mixed"&&t!==this.type)throw new y(`Graph.${e}: cannot find this type of edges in your ${this.type} graph.`);if(arguments.length>2){if(this.multi)throw new y(`Graph.${e}: cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.`);let s=""+n,a=""+r;if(r=arguments[2],o=D(this,s,a,t),!o)throw new p(`Graph.${e}: could not find an edge for the given path ("${s}" - "${a}").`)}else{if(t!=="mixed")throw new y(`Graph.${e}: calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type.`);if(n=""+n,o=this._edges.get(n),!o)throw new p(`Graph.${e}: could not find the "${n}" edge in the graph.`)}if(!_(r))throw new l(`Graph.${e}: provided attributes are not a plain object.`);return k(o.attributes,r),this.emit("edgeAttributesUpdated",{key:o.key,type:"merge",attributes:o.attributes,data:r}),this}}function bt(i,e,t){i.prototype[e]=function(n,r){let o;if(this.type!=="mixed"&&t!=="mixed"&&t!==this.type)throw new y(`Graph.${e}: cannot find this type of edges in your ${this.type} graph.`);if(arguments.length>2){if(this.multi)throw new y(`Graph.${e}: cannot use a {source,target} combo when asking about an edge's attributes in a MultiGraph since we cannot infer the one you want information about.`);let s=""+n,a=""+r;if(r=arguments[2],o=D(this,s,a,t),!o)throw new p(`Graph.${e}: could not find an edge for the given path ("${s}" - "${a}").`)}else{if(t!=="mixed")throw new y(`Graph.${e}: calling this method with only a key (vs. a source and target) does not make sense since an edge with this key could have the other type.`);if(n=""+n,o=this._edges.get(n),!o)throw new p(`Graph.${e}: could not find the "${n}" edge in the graph.`)}if(typeof r!="function")throw new l(`Graph.${e}: provided updater is not a function.`);return o.attributes=r(o.attributes),this.emit("edgeAttributesUpdated",{key:o.key,type:"update",attributes:o.attributes}),this}}var $t=[{name:i=>`get${i}Attribute`,attacher:ct},{name:i=>`get${i}Attributes`,attacher:ft},{name:i=>`has${i}Attribute`,attacher:pt},{name:i=>`set${i}Attribute`,attacher:lt},{name:i=>`update${i}Attribute`,attacher:gt},{name:i=>`remove${i}Attribute`,attacher:yt},{name:i=>`replace${i}Attributes`,attacher:wt},{name:i=>`merge${i}Attributes`,attacher:mt},{name:i=>`update${i}Attributes`,attacher:bt}];function vt(i){$t.forEach(function({name:e,attacher:t}){t(i,e("Edge"),"mixed"),t(i,e("DirectedEdge"),"directed"),t(i,e("UndirectedEdge"),"undirected")})}var xt=[{name:"edges",type:"mixed"},{name:"inEdges",type:"directed",direction:"in"},{name:"outEdges",type:"directed",direction:"out"},{name:"inboundEdges",type:"mixed",direction:"in"},{name:"outboundEdges",type:"mixed",direction:"out"},{name:"directedEdges",type:"directed"},{name:"undirectedEdges",type:"undirected"}];function kt(i,e,t,n){let r=!1;for(let o in e){if(o===n)continue;let s=e[o];if(r=t(s.key,s.attributes,s.source.key,s.target.key,s.source.attributes,s.target.attributes,s.undirected),i&&r)return s.key}}function _t(i,e,t,n){let r,o,s,a=!1;for(let u in e)if(u!==n){r=e[u];do{if(o=r.source,s=r.target,a=t(r.key,r.attributes,o.key,s.key,o.attributes,s.attributes,r.undirected),i&&a)return r.key;r=r.next}while(r!==void 0)}}function ee(i,e){let t=Object.keys(i),n=t.length,r,o=0;return{[Symbol.iterator](){return this},next(){do if(r)r=r.next;else{if(o>=n)return{done:!0};let s=t[o++];if(s===e){r=void 0;continue}r=i[s]}while(!r);return{done:!1,value:{edge:r.key,attributes:r.attributes,source:r.source.key,target:r.target.key,sourceAttributes:r.source.attributes,targetAttributes:r.target.attributes,undirected:r.undirected}}}}}function Et(i,e,t,n){let r=e[t];if(!r)return;let o=r.source,s=r.target;if(n(r.key,r.attributes,o.key,s.key,o.attributes,s.attributes,r.undirected)&&i)return r.key}function Gt(i,e,t,n){let r=e[t];if(!r)return;let o=!1;do{if(o=n(r.key,r.attributes,r.source.key,r.target.key,r.source.attributes,r.target.attributes,r.undirected),i&&o)return r.key;r=r.next}while(r!==void 0)}function te(i,e){let t=i[e];if(t.next!==void 0)return{[Symbol.iterator](){return this},next(){if(!t)return{done:!0};let r={edge:t.key,attributes:t.attributes,source:t.source.key,target:t.target.key,sourceAttributes:t.source.attributes,targetAttributes:t.target.attributes,undirected:t.undirected};return t=t.next,{done:!1,value:r}}};let n=!1;return{[Symbol.iterator](){return this},next(){return n===!0?{done:!0}:(n=!0,{done:!1,value:{edge:t.key,attributes:t.attributes,source:t.source.key,target:t.target.key,sourceAttributes:t.source.attributes,targetAttributes:t.target.attributes,undirected:t.undirected}})}}}function At(i,e){if(i.size===0)return[];if(e==="mixed"||e===i.type)return Array.from(i._edges.keys());let t=e==="undirected"?i.undirectedSize:i.directedSize,n=new Array(t),r=e==="undirected",o=i._edges.values(),s=0,a,u;for(;a=o.next(),a.done!==!0;)u=a.value,u.undirected===r&&(n[s++]=u.key);return n}function Le(i,e,t,n){if(e.size===0)return;let r=t!=="mixed"&&t!==e.type,o=t==="undirected",s,a,u=!1,d=e._edges.values();for(;s=d.next(),s.done!==!0;){if(a=s.value,r&&a.undirected!==o)continue;let{key:c,attributes:h,source:f,target:g}=a;if(u=n(c,h,f.key,g.key,f.attributes,g.attributes,a.undirected),i&&u)return c}}function Dt(i,e){if(i.size===0)return O();let t=e!=="mixed"&&e!==i.type,n=e==="undirected",r=i._edges.values();return{[Symbol.iterator](){return this},next(){let o,s;for(;;){if(o=r.next(),o.done)return o;if(s=o.value,!(t&&s.undirected!==n))break}return{value:{edge:s.key,attributes:s.attributes,source:s.source.key,target:s.target.key,sourceAttributes:s.source.attributes,targetAttributes:s.target.attributes,undirected:s.undirected},done:!1}}}}function ne(i,e,t,n,r,o){let s=e?_t:kt,a;if(t!=="undirected"&&(n!=="out"&&(a=s(i,r.in,o),i&&a)||n!=="in"&&(a=s(i,r.out,o,n?void 0:r.key),i&&a))||t!=="directed"&&(a=s(i,r.undirected,o),i&&a))return a}function Nt(i,e,t,n){let r=[];return ne(!1,i,e,t,n,function(o){r.push(o)}),r}function Lt(i,e,t){let n=O();return i!=="undirected"&&(e!=="out"&&typeof t.in<"u"&&(n=L(n,ee(t.in))),e!=="in"&&typeof t.out<"u"&&(n=L(n,ee(t.out,e?void 0:t.key)))),i!=="directed"&&typeof t.undirected<"u"&&(n=L(n,ee(t.undirected))),n}function ie(i,e,t,n,r,o,s){let a=t?Gt:Et,u;if(e!=="undirected"&&(typeof r.in<"u"&&n!=="out"&&(u=a(i,r.in,o,s),i&&u)||typeof r.out<"u"&&n!=="in"&&(n||r.key!==o)&&(u=a(i,r.out,o,s),i&&u))||e!=="directed"&&typeof r.undirected<"u"&&(u=a(i,r.undirected,o,s),i&&u))return u}function St(i,e,t,n,r){let o=[];return ie(!1,i,e,t,n,r,function(s){o.push(s)}),o}function Mt(i,e,t,n){let r=O();return i!=="undirected"&&(typeof t.in<"u"&&e!=="out"&&n in t.in&&(r=L(r,te(t.in,n))),typeof t.out<"u"&&e!=="in"&&n in t.out&&(e||t.key!==n)&&(r=L(r,te(t.out,n)))),i!=="directed"&&typeof t.undirected<"u"&&n in t.undirected&&(r=L(r,te(t.undirected,n))),r}function Ut(i,e){let{name:t,type:n,direction:r}=e;i.prototype[t]=function(o,s){if(n!=="mixed"&&this.type!=="mixed"&&n!==this.type)return[];if(!arguments.length)return At(this,n);if(arguments.length===1){o=""+o;let a=this._nodes.get(o);if(typeof a>"u")throw new p(`Graph.${t}: could not find the "${o}" node in the graph.`);return Nt(this.multi,n==="mixed"?this.type:n,r,a)}if(arguments.length===2){o=""+o,s=""+s;let a=this._nodes.get(o);if(!a)throw new p(`Graph.${t}:  could not find the "${o}" source node in the graph.`);if(!this._nodes.has(s))throw new p(`Graph.${t}:  could not find the "${s}" target node in the graph.`);return St(n,this.multi,r,a,s)}throw new l(`Graph.${t}: too many arguments (expecting 0, 1 or 2 and got ${arguments.length}).`)}}function Ct(i,e){let{name:t,type:n,direction:r}=e,o="forEach"+t[0].toUpperCase()+t.slice(1,-1);i.prototype[o]=function(d,c,h){if(!(n!=="mixed"&&this.type!=="mixed"&&n!==this.type)){if(arguments.length===1)return h=d,Le(!1,this,n,h);if(arguments.length===2){d=""+d,h=c;let f=this._nodes.get(d);if(typeof f>"u")throw new p(`Graph.${o}: could not find the "${d}" node in the graph.`);return ne(!1,this.multi,n==="mixed"?this.type:n,r,f,h)}if(arguments.length===3){d=""+d,c=""+c;let f=this._nodes.get(d);if(!f)throw new p(`Graph.${o}:  could not find the "${d}" source node in the graph.`);if(!this._nodes.has(c))throw new p(`Graph.${o}:  could not find the "${c}" target node in the graph.`);return ie(!1,n,this.multi,r,f,c,h)}throw new l(`Graph.${o}: too many arguments (expecting 1, 2 or 3 and got ${arguments.length}).`)}};let s="map"+t[0].toUpperCase()+t.slice(1);i.prototype[s]=function(){let d=Array.prototype.slice.call(arguments),c=d.pop(),h;if(d.length===0){let f=0;n!=="directed"&&(f+=this.undirectedSize),n!=="undirected"&&(f+=this.directedSize),h=new Array(f);let g=0;d.push((w,b,v,x,E,M,K)=>{h[g++]=c(w,b,v,x,E,M,K)})}else h=[],d.push((f,g,w,b,v,x,E)=>{h.push(c(f,g,w,b,v,x,E))});return this[o].apply(this,d),h};let a="filter"+t[0].toUpperCase()+t.slice(1);i.prototype[a]=function(){let d=Array.prototype.slice.call(arguments),c=d.pop(),h=[];return d.push((f,g,w,b,v,x,E)=>{c(f,g,w,b,v,x,E)&&h.push(f)}),this[o].apply(this,d),h};let u="reduce"+t[0].toUpperCase()+t.slice(1);i.prototype[u]=function(){let d=Array.prototype.slice.call(arguments);if(d.length<2||d.length>4)throw new l(`Graph.${u}: invalid number of arguments (expecting 2, 3 or 4 and got ${d.length}).`);if(typeof d[d.length-1]=="function"&&typeof d[d.length-2]!="function")throw new l(`Graph.${u}: missing initial value. You must provide it because the callback takes more than one argument and we cannot infer the initial value from the first iteration, as you could with a simple array.`);let c,h;d.length===2?(c=d[0],h=d[1],d=[]):d.length===3?(c=d[1],h=d[2],d=[d[0]]):d.length===4&&(c=d[2],h=d[3],d=[d[0],d[1]]);let f=h;return d.push((g,w,b,v,x,E,M)=>{f=c(f,g,w,b,v,x,E,M)}),this[o].apply(this,d),f}}function It(i,e){let{name:t,type:n,direction:r}=e,o="find"+t[0].toUpperCase()+t.slice(1,-1);i.prototype[o]=function(u,d,c){if(n!=="mixed"&&this.type!=="mixed"&&n!==this.type)return!1;if(arguments.length===1)return c=u,Le(!0,this,n,c);if(arguments.length===2){u=""+u,c=d;let h=this._nodes.get(u);if(typeof h>"u")throw new p(`Graph.${o}: could not find the "${u}" node in the graph.`);return ne(!0,this.multi,n==="mixed"?this.type:n,r,h,c)}if(arguments.length===3){u=""+u,d=""+d;let h=this._nodes.get(u);if(!h)throw new p(`Graph.${o}:  could not find the "${u}" source node in the graph.`);if(!this._nodes.has(d))throw new p(`Graph.${o}:  could not find the "${d}" target node in the graph.`);return ie(!0,n,this.multi,r,h,d,c)}throw new l(`Graph.${o}: too many arguments (expecting 1, 2 or 3 and got ${arguments.length}).`)};let s="some"+t[0].toUpperCase()+t.slice(1,-1);i.prototype[s]=function(){let u=Array.prototype.slice.call(arguments),d=u.pop();return u.push((h,f,g,w,b,v,x)=>d(h,f,g,w,b,v,x)),!!this[o].apply(this,u)};let a="every"+t[0].toUpperCase()+t.slice(1,-1);i.prototype[a]=function(){let u=Array.prototype.slice.call(arguments),d=u.pop();return u.push((h,f,g,w,b,v,x)=>!d(h,f,g,w,b,v,x)),!this[o].apply(this,u)}}function Ot(i,e){let{name:t,type:n,direction:r}=e,o=t.slice(0,-1)+"Entries";i.prototype[o]=function(s,a){if(n!=="mixed"&&this.type!=="mixed"&&n!==this.type)return O();if(!arguments.length)return Dt(this,n);if(arguments.length===1){s=""+s;let u=this._nodes.get(s);if(!u)throw new p(`Graph.${o}: could not find the "${s}" node in the graph.`);return Lt(n,r,u)}if(arguments.length===2){s=""+s,a=""+a;let u=this._nodes.get(s);if(!u)throw new p(`Graph.${o}:  could not find the "${s}" source node in the graph.`);if(!this._nodes.has(a))throw new p(`Graph.${o}:  could not find the "${a}" target node in the graph.`);return Mt(n,r,u,a)}throw new l(`Graph.${o}: too many arguments (expecting 0, 1 or 2 and got ${arguments.length}).`)}}function Tt(i){xt.forEach(e=>{Ut(i,e),Ct(i,e),It(i,e),Ot(i,e)})}var Wt=[{name:"neighbors",type:"mixed"},{name:"inNeighbors",type:"directed",direction:"in"},{name:"outNeighbors",type:"directed",direction:"out"},{name:"inboundNeighbors",type:"mixed",direction:"in"},{name:"outboundNeighbors",type:"mixed",direction:"out"},{name:"directedNeighbors",type:"directed"},{name:"undirectedNeighbors",type:"undirected"}];function Z(){this.A=null,this.B=null}Z.prototype.wrap=function(i){this.A===null?this.A=i:this.B===null&&(this.B=i)};Z.prototype.has=function(i){return this.A!==null&&i in this.A||this.B!==null&&i in this.B};function P(i,e,t,n,r){for(let o in n){let s=n[o],a=s.source,u=s.target,d=a===t?u:a;if(e&&e.has(d.key))continue;let c=r(d.key,d.attributes);if(i&&c)return d.key}}function re(i,e,t,n,r){if(e!=="mixed"){if(e==="undirected")return P(i,null,n,n.undirected,r);if(typeof t=="string")return P(i,null,n,n[t],r)}let o=new Z,s;if(e!=="undirected"){if(t!=="out"){if(s=P(i,null,n,n.in,r),i&&s)return s;o.wrap(n.in)}if(t!=="in"){if(s=P(i,o,n,n.out,r),i&&s)return s;o.wrap(n.out)}}if(e!=="directed"&&(s=P(i,o,n,n.undirected,r),i&&s))return s}function jt(i,e,t){if(i!=="mixed"){if(i==="undirected")return Object.keys(t.undirected);if(typeof e=="string")return Object.keys(t[e])}let n=[];return re(!1,i,e,t,function(r){n.push(r)}),n}function z(i,e,t){let n=Object.keys(t),r=n.length,o=0;return{[Symbol.iterator](){return this},next(){let s=null;do{if(o>=r)return i&&i.wrap(t),{done:!0};let a=t[n[o++]],u=a.source,d=a.target;if(s=u===e?d:u,i&&i.has(s.key)){s=null;continue}}while(s===null);return{done:!1,value:{neighbor:s.key,attributes:s.attributes}}}}}function Rt(i,e,t){if(i!=="mixed"){if(i==="undirected")return z(null,t,t.undirected);if(typeof e=="string")return z(null,t,t[e])}let n=O(),r=new Z;return i!=="undirected"&&(e!=="out"&&(n=L(n,z(r,t,t.in))),e!=="in"&&(n=L(n,z(r,t,t.out)))),i!=="directed"&&(n=L(n,z(r,t,t.undirected))),n}function Kt(i,e){let{name:t,type:n,direction:r}=e;i.prototype[t]=function(o){if(n!=="mixed"&&this.type!=="mixed"&&n!==this.type)return[];o=""+o;let s=this._nodes.get(o);if(typeof s>"u")throw new p(`Graph.${t}: could not find the "${o}" node in the graph.`);return jt(n==="mixed"?this.type:n,r,s)}}function Pt(i,e){let{name:t,type:n,direction:r}=e,o="forEach"+t[0].toUpperCase()+t.slice(1,-1);i.prototype[o]=function(d,c){if(n!=="mixed"&&this.type!=="mixed"&&n!==this.type)return;d=""+d;let h=this._nodes.get(d);if(typeof h>"u")throw new p(`Graph.${o}: could not find the "${d}" node in the graph.`);re(!1,n==="mixed"?this.type:n,r,h,c)};let s="map"+t[0].toUpperCase()+t.slice(1);i.prototype[s]=function(d,c){let h=[];return this[o](d,(f,g)=>{h.push(c(f,g))}),h};let a="filter"+t[0].toUpperCase()+t.slice(1);i.prototype[a]=function(d,c){let h=[];return this[o](d,(f,g)=>{c(f,g)&&h.push(f)}),h};let u="reduce"+t[0].toUpperCase()+t.slice(1);i.prototype[u]=function(d,c,h){if(arguments.length<3)throw new l(`Graph.${u}: missing initial value. You must provide it because the callback takes more than one argument and we cannot infer the initial value from the first iteration, as you could with a simple array.`);let f=h;return this[o](d,(g,w)=>{f=c(f,g,w)}),f}}function zt(i,e){let{name:t,type:n,direction:r}=e,o=t[0].toUpperCase()+t.slice(1,-1),s="find"+o;i.prototype[s]=function(d,c){if(n!=="mixed"&&this.type!=="mixed"&&n!==this.type)return;d=""+d;let h=this._nodes.get(d);if(typeof h>"u")throw new p(`Graph.${s}: could not find the "${d}" node in the graph.`);return re(!0,n==="mixed"?this.type:n,r,h,c)};let a="some"+o;i.prototype[a]=function(d,c){return!!this[s](d,c)};let u="every"+o;i.prototype[u]=function(d,c){return!this[s](d,(f,g)=>!c(f,g))}}function Ft(i,e){let{name:t,type:n,direction:r}=e,o=t.slice(0,-1)+"Entries";i.prototype[o]=function(s){if(n!=="mixed"&&this.type!=="mixed"&&n!==this.type)return O();s=""+s;let a=this._nodes.get(s);if(typeof a>"u")throw new p(`Graph.${o}: could not find the "${s}" node in the graph.`);return Rt(n==="mixed"?this.type:n,r,a)}}function Bt(i){Wt.forEach(e=>{Kt(i,e),Pt(i,e),zt(i,e),Ft(i,e)})}function Q(i,e,t,n,r){let o=n._nodes.values(),s=n.type,a,u,d,c,h,f,g;for(;a=o.next(),a.done!==!0;){let w=!1;if(u=a.value,s!=="undirected"){c=u.out;for(d in c){h=c[d];do{if(f=h.target,w=!0,g=r(u.key,f.key,u.attributes,f.attributes,h.key,h.attributes,h.undirected),i&&g)return h;h=h.next}while(h)}}if(s!=="directed"){c=u.undirected;for(d in c)if(!(e&&u.key>d)){h=c[d];do{if(f=h.target,f.key!==d&&(f=h.source),w=!0,g=r(u.key,f.key,u.attributes,f.attributes,h.key,h.attributes,h.undirected),i&&g)return h;h=h.next}while(h)}}if(t&&!w&&(g=r(u.key,null,u.attributes,null,null,null,null),i&&g))return null}}function Yt(i,e){let t={key:i};return ke(e.attributes)||(t.attributes=k({},e.attributes)),t}function Qt(i,e,t){let n={key:e,source:t.source.key,target:t.target.key};return ke(t.attributes)||(n.attributes=k({},t.attributes)),i==="mixed"&&t.undirected&&(n.undirected=!0),n}function Xt(i){if(!_(i))throw new l('Graph.import: invalid serialized node. A serialized node should be a plain object with at least a "key" property.');if(!("key"in i))throw new l("Graph.import: serialized node is missing its key.");if("attributes"in i&&(!_(i.attributes)||i.attributes===null))throw new l("Graph.import: invalid attributes. Attributes should be a plain object, null or omitted.")}function Ht(i){if(!_(i))throw new l('Graph.import: invalid serialized edge. A serialized edge should be a plain object with at least a "source" & "target" property.');if(!("source"in i))throw new l("Graph.import: serialized edge is missing its source.");if(!("target"in i))throw new l("Graph.import: serialized edge is missing its target.");if("attributes"in i&&(!_(i.attributes)||i.attributes===null))throw new l("Graph.import: invalid attributes. Attributes should be a plain object, null or omitted.");if("undirected"in i&&typeof i.undirected!="boolean")throw new l("Graph.import: invalid undirectedness information. Undirected should be boolean or omitted.")}var Jt=Ze(),Vt=new Set(["directed","undirected","mixed"]),$e=new Set(["domain","_events","_eventsCount","_maxListeners"]),Zt=[{name:i=>`${i}Edge`,generateKey:!0},{name:i=>`${i}DirectedEdge`,generateKey:!0,type:"directed"},{name:i=>`${i}UndirectedEdge`,generateKey:!0,type:"undirected"},{name:i=>`${i}EdgeWithKey`},{name:i=>`${i}DirectedEdgeWithKey`,type:"directed"},{name:i=>`${i}UndirectedEdgeWithKey`,type:"undirected"}],qt={allowSelfLoops:!0,multi:!1,type:"mixed"};function en(i,e,t){if(t&&!_(t))throw new l(`Graph.addNode: invalid attributes. Expecting an object but got "${t}"`);if(e=""+e,t=t||{},i._nodes.has(e))throw new y(`Graph.addNode: the "${e}" node already exist in the graph.`);let n=new i.NodeDataClass(e,t);return i._nodes.set(e,n),i.emit("nodeAdded",{key:e,attributes:t}),n}function ve(i,e,t){let n=new i.NodeDataClass(e,t);return i._nodes.set(e,n),i.emit("nodeAdded",{key:e,attributes:t}),n}function Se(i,e,t,n,r,o,s,a){if(!n&&i.type==="undirected")throw new y(`Graph.${e}: you cannot add a directed edge to an undirected graph. Use the #.addEdge or #.addUndirectedEdge instead.`);if(n&&i.type==="directed")throw new y(`Graph.${e}: you cannot add an undirected edge to a directed graph. Use the #.addEdge or #.addDirectedEdge instead.`);if(a&&!_(a))throw new l(`Graph.${e}: invalid attributes. Expecting an object but got "${a}"`);if(o=""+o,s=""+s,a=a||{},!i.allowSelfLoops&&o===s)throw new y(`Graph.${e}: source & target are the same ("${o}"), thus creating a loop explicitly forbidden by this graph 'allowSelfLoops' option set to false.`);let u=i._nodes.get(o),d=i._nodes.get(s);if(!u)throw new p(`Graph.${e}: source node "${o}" not found.`);if(!d)throw new p(`Graph.${e}: target node "${s}" not found.`);let c={key:null,undirected:n,source:o,target:s,attributes:a};if(t)r=i._edgeKeyGenerator();else if(r=""+r,i._edges.has(r))throw new y(`Graph.${e}: the "${r}" edge already exists in the graph.`);if(!i.multi&&(n?typeof u.undirected[s]<"u":typeof u.out[s]<"u"))throw new y(`Graph.${e}: an edge linking "${o}" to "${s}" already exists. If you really want to add multiple edges linking those nodes, you should create a multi graph by using the 'multi' option.`);let h=new T(n,r,u,d,a);i._edges.set(r,h);let f=o===s;return n?(u.undirectedDegree++,d.undirectedDegree++,f&&(u.undirectedLoops++,i._undirectedSelfLoopCount++)):(u.outDegree++,d.inDegree++,f&&(u.directedLoops++,i._directedSelfLoopCount++)),i.multi?h.attachMulti():h.attach(),n?i._undirectedSize++:i._directedSize++,c.key=r,i.emit("edgeAdded",c),r}function tn(i,e,t,n,r,o,s,a,u){if(!n&&i.type==="undirected")throw new y(`Graph.${e}: you cannot merge/update a directed edge to an undirected graph. Use the #.mergeEdge/#.updateEdge or #.addUndirectedEdge instead.`);if(n&&i.type==="directed")throw new y(`Graph.${e}: you cannot merge/update an undirected edge to a directed graph. Use the #.mergeEdge/#.updateEdge or #.addDirectedEdge instead.`);if(a){if(u){if(typeof a!="function")throw new l(`Graph.${e}: invalid updater function. Expecting a function but got "${a}"`)}else if(!_(a))throw new l(`Graph.${e}: invalid attributes. Expecting an object but got "${a}"`)}o=""+o,s=""+s;let d;if(u&&(d=a,a=void 0),!i.allowSelfLoops&&o===s)throw new y(`Graph.${e}: source & target are the same ("${o}"), thus creating a loop explicitly forbidden by this graph 'allowSelfLoops' option set to false.`);let c=i._nodes.get(o),h=i._nodes.get(s),f,g;if(!t&&(f=i._edges.get(r),f)){if((f.source.key!==o||f.target.key!==s)&&(!n||f.source.key!==s||f.target.key!==o))throw new y(`Graph.${e}: inconsistency detected when attempting to merge the "${r}" edge with "${o}" source & "${s}" target vs. ("${f.source.key}", "${f.target.key}").`);g=f}if(!g&&!i.multi&&c&&(g=n?c.undirected[s]:c.out[s]),g){let E=[g.key,!1,!1,!1];if(u?!d:!a)return E;if(u){let M=g.attributes;g.attributes=d(M),i.emit("edgeAttributesUpdated",{type:"replace",key:g.key,attributes:g.attributes})}else k(g.attributes,a),i.emit("edgeAttributesUpdated",{type:"merge",key:g.key,attributes:g.attributes,data:a});return E}a=a||{},u&&d&&(a=d(a));let w={key:null,undirected:n,source:o,target:s,attributes:a};if(t)r=i._edgeKeyGenerator();else if(r=""+r,i._edges.has(r))throw new y(`Graph.${e}: the "${r}" edge already exists in the graph.`);let b=!1,v=!1;c||(c=ve(i,o,{}),b=!0,o===s&&(h=c,v=!0)),h||(h=ve(i,s,{}),v=!0),f=new T(n,r,c,h,a),i._edges.set(r,f);let x=o===s;return n?(c.undirectedDegree++,h.undirectedDegree++,x&&(c.undirectedLoops++,i._undirectedSelfLoopCount++)):(c.outDegree++,h.inDegree++,x&&(c.directedLoops++,i._directedSelfLoopCount++)),i.multi?f.attachMulti():f.attach(),n?i._undirectedSize++:i._directedSize++,w.key=r,i.emit("edgeAdded",w),[r,!0,b,v]}function C(i,e){i._edges.delete(e.key);let{source:t,target:n,attributes:r}=e,o=e.undirected,s=t===n;o?(t.undirectedDegree--,n.undirectedDegree--,s&&(t.undirectedLoops--,i._undirectedSelfLoopCount--)):(t.outDegree--,n.inDegree--,s&&(t.directedLoops--,i._directedSelfLoopCount--)),i.multi?e.detachMulti():e.detach(),o?i._undirectedSize--:i._directedSize--,i.emit("edgeDropped",{key:e.key,attributes:r,source:t.key,target:n.key,undirected:o})}var $=class i extends xe.EventEmitter{constructor(e){if(super(),e=k({},qt,e),typeof e.multi!="boolean")throw new l(`Graph.constructor: invalid 'multi' option. Expecting a boolean but got "${e.multi}".`);if(!Vt.has(e.type))throw new l(`Graph.constructor: invalid 'type' option. Should be one of "mixed", "directed" or "undirected" but got "${e.type}".`);if(typeof e.allowSelfLoops!="boolean")throw new l(`Graph.constructor: invalid 'allowSelfLoops' option. Expecting a boolean but got "${e.allowSelfLoops}".`);let t=e.type==="mixed"?_e:e.type==="directed"?Ee:Ge;A(this,"NodeDataClass",t);let n="geid_"+Jt()+"_",r=0,o=()=>{let s;do s=n+r++;while(this._edges.has(s));return s};A(this,"_attributes",{}),A(this,"_nodes",new Map),A(this,"_edges",new Map),A(this,"_directedSize",0),A(this,"_undirectedSize",0),A(this,"_directedSelfLoopCount",0),A(this,"_undirectedSelfLoopCount",0),A(this,"_edgeKeyGenerator",o),A(this,"_options",e),$e.forEach(s=>A(this,s,this[s])),N(this,"order",()=>this._nodes.size),N(this,"size",()=>this._edges.size),N(this,"directedSize",()=>this._directedSize),N(this,"undirectedSize",()=>this._undirectedSize),N(this,"selfLoopCount",()=>this._directedSelfLoopCount+this._undirectedSelfLoopCount),N(this,"directedSelfLoopCount",()=>this._directedSelfLoopCount),N(this,"undirectedSelfLoopCount",()=>this._undirectedSelfLoopCount),N(this,"multi",this._options.multi),N(this,"type",this._options.type),N(this,"allowSelfLoops",this._options.allowSelfLoops),N(this,"implementation",()=>"graphology")}_resetInstanceCounters(){this._directedSize=0,this._undirectedSize=0,this._directedSelfLoopCount=0,this._undirectedSelfLoopCount=0}hasNode(e){return this._nodes.has(""+e)}hasDirectedEdge(e,t){if(this.type==="undirected")return!1;if(arguments.length===1){let n=""+e,r=this._edges.get(n);return!!r&&!r.undirected}else if(arguments.length===2){e=""+e,t=""+t;let n=this._nodes.get(e);return n?n.out.hasOwnProperty(t):!1}throw new l(`Graph.hasDirectedEdge: invalid arity (${arguments.length}, instead of 1 or 2). You can either ask for an edge id or for the existence of an edge between a source & a target.`)}hasUndirectedEdge(e,t){if(this.type==="directed")return!1;if(arguments.length===1){let n=""+e,r=this._edges.get(n);return!!r&&r.undirected}else if(arguments.length===2){e=""+e,t=""+t;let n=this._nodes.get(e);return n?n.undirected.hasOwnProperty(t):!1}throw new l(`Graph.hasDirectedEdge: invalid arity (${arguments.length}, instead of 1 or 2). You can either ask for an edge id or for the existence of an edge between a source & a target.`)}hasEdge(e,t){if(arguments.length===1){let n=""+e;return this._edges.has(n)}else if(arguments.length===2){e=""+e,t=""+t;let n=this._nodes.get(e);return n?typeof n.out<"u"&&n.out.hasOwnProperty(t)||typeof n.undirected<"u"&&n.undirected.hasOwnProperty(t):!1}throw new l(`Graph.hasEdge: invalid arity (${arguments.length}, instead of 1 or 2). You can either ask for an edge id or for the existence of an edge between a source & a target.`)}directedEdge(e,t){if(this.type==="undirected")return;if(e=""+e,t=""+t,this.multi)throw new y("Graph.directedEdge: this method is irrelevant with multigraphs since there might be multiple edges between source & target. See #.directedEdges instead.");let n=this._nodes.get(e);if(!n)throw new p(`Graph.directedEdge: could not find the "${e}" source node in the graph.`);if(!this._nodes.has(t))throw new p(`Graph.directedEdge: could not find the "${t}" target node in the graph.`);let r=n.out&&n.out[t]||void 0;if(r)return r.key}undirectedEdge(e,t){if(this.type==="directed")return;if(e=""+e,t=""+t,this.multi)throw new y("Graph.undirectedEdge: this method is irrelevant with multigraphs since there might be multiple edges between source & target. See #.undirectedEdges instead.");let n=this._nodes.get(e);if(!n)throw new p(`Graph.undirectedEdge: could not find the "${e}" source node in the graph.`);if(!this._nodes.has(t))throw new p(`Graph.undirectedEdge: could not find the "${t}" target node in the graph.`);let r=n.undirected&&n.undirected[t]||void 0;if(r)return r.key}edge(e,t){if(this.multi)throw new y("Graph.edge: this method is irrelevant with multigraphs since there might be multiple edges between source & target. See #.edges instead.");e=""+e,t=""+t;let n=this._nodes.get(e);if(!n)throw new p(`Graph.edge: could not find the "${e}" source node in the graph.`);if(!this._nodes.has(t))throw new p(`Graph.edge: could not find the "${t}" target node in the graph.`);let r=n.out&&n.out[t]||n.undirected&&n.undirected[t]||void 0;if(r)return r.key}areDirectedNeighbors(e,t){e=""+e,t=""+t;let n=this._nodes.get(e);if(!n)throw new p(`Graph.areDirectedNeighbors: could not find the "${e}" node in the graph.`);return this.type==="undirected"?!1:t in n.in||t in n.out}areOutNeighbors(e,t){e=""+e,t=""+t;let n=this._nodes.get(e);if(!n)throw new p(`Graph.areOutNeighbors: could not find the "${e}" node in the graph.`);return this.type==="undirected"?!1:t in n.out}areInNeighbors(e,t){e=""+e,t=""+t;let n=this._nodes.get(e);if(!n)throw new p(`Graph.areInNeighbors: could not find the "${e}" node in the graph.`);return this.type==="undirected"?!1:t in n.in}areUndirectedNeighbors(e,t){e=""+e,t=""+t;let n=this._nodes.get(e);if(!n)throw new p(`Graph.areUndirectedNeighbors: could not find the "${e}" node in the graph.`);return this.type==="directed"?!1:t in n.undirected}areNeighbors(e,t){e=""+e,t=""+t;let n=this._nodes.get(e);if(!n)throw new p(`Graph.areNeighbors: could not find the "${e}" node in the graph.`);return this.type!=="undirected"&&(t in n.in||t in n.out)||this.type!=="directed"&&t in n.undirected}areInboundNeighbors(e,t){e=""+e,t=""+t;let n=this._nodes.get(e);if(!n)throw new p(`Graph.areInboundNeighbors: could not find the "${e}" node in the graph.`);return this.type!=="undirected"&&t in n.in||this.type!=="directed"&&t in n.undirected}areOutboundNeighbors(e,t){e=""+e,t=""+t;let n=this._nodes.get(e);if(!n)throw new p(`Graph.areOutboundNeighbors: could not find the "${e}" node in the graph.`);return this.type!=="undirected"&&t in n.out||this.type!=="directed"&&t in n.undirected}inDegree(e){e=""+e;let t=this._nodes.get(e);if(!t)throw new p(`Graph.inDegree: could not find the "${e}" node in the graph.`);return this.type==="undirected"?0:t.inDegree}outDegree(e){e=""+e;let t=this._nodes.get(e);if(!t)throw new p(`Graph.outDegree: could not find the "${e}" node in the graph.`);return this.type==="undirected"?0:t.outDegree}directedDegree(e){e=""+e;let t=this._nodes.get(e);if(!t)throw new p(`Graph.directedDegree: could not find the "${e}" node in the graph.`);return this.type==="undirected"?0:t.inDegree+t.outDegree}undirectedDegree(e){e=""+e;let t=this._nodes.get(e);if(!t)throw new p(`Graph.undirectedDegree: could not find the "${e}" node in the graph.`);return this.type==="directed"?0:t.undirectedDegree}inboundDegree(e){e=""+e;let t=this._nodes.get(e);if(!t)throw new p(`Graph.inboundDegree: could not find the "${e}" node in the graph.`);let n=0;return this.type!=="directed"&&(n+=t.undirectedDegree),this.type!=="undirected"&&(n+=t.inDegree),n}outboundDegree(e){e=""+e;let t=this._nodes.get(e);if(!t)throw new p(`Graph.outboundDegree: could not find the "${e}" node in the graph.`);let n=0;return this.type!=="directed"&&(n+=t.undirectedDegree),this.type!=="undirected"&&(n+=t.outDegree),n}degree(e){e=""+e;let t=this._nodes.get(e);if(!t)throw new p(`Graph.degree: could not find the "${e}" node in the graph.`);let n=0;return this.type!=="directed"&&(n+=t.undirectedDegree),this.type!=="undirected"&&(n+=t.inDegree+t.outDegree),n}inDegreeWithoutSelfLoops(e){e=""+e;let t=this._nodes.get(e);if(!t)throw new p(`Graph.inDegreeWithoutSelfLoops: could not find the "${e}" node in the graph.`);return this.type==="undirected"?0:t.inDegree-t.directedLoops}outDegreeWithoutSelfLoops(e){e=""+e;let t=this._nodes.get(e);if(!t)throw new p(`Graph.outDegreeWithoutSelfLoops: could not find the "${e}" node in the graph.`);return this.type==="undirected"?0:t.outDegree-t.directedLoops}directedDegreeWithoutSelfLoops(e){e=""+e;let t=this._nodes.get(e);if(!t)throw new p(`Graph.directedDegreeWithoutSelfLoops: could not find the "${e}" node in the graph.`);return this.type==="undirected"?0:t.inDegree+t.outDegree-t.directedLoops*2}undirectedDegreeWithoutSelfLoops(e){e=""+e;let t=this._nodes.get(e);if(!t)throw new p(`Graph.undirectedDegreeWithoutSelfLoops: could not find the "${e}" node in the graph.`);return this.type==="directed"?0:t.undirectedDegree-t.undirectedLoops*2}inboundDegreeWithoutSelfLoops(e){e=""+e;let t=this._nodes.get(e);if(!t)throw new p(`Graph.inboundDegreeWithoutSelfLoops: could not find the "${e}" node in the graph.`);let n=0,r=0;return this.type!=="directed"&&(n+=t.undirectedDegree,r+=t.undirectedLoops*2),this.type!=="undirected"&&(n+=t.inDegree,r+=t.directedLoops),n-r}outboundDegreeWithoutSelfLoops(e){e=""+e;let t=this._nodes.get(e);if(!t)throw new p(`Graph.outboundDegreeWithoutSelfLoops: could not find the "${e}" node in the graph.`);let n=0,r=0;return this.type!=="directed"&&(n+=t.undirectedDegree,r+=t.undirectedLoops*2),this.type!=="undirected"&&(n+=t.outDegree,r+=t.directedLoops),n-r}degreeWithoutSelfLoops(e){e=""+e;let t=this._nodes.get(e);if(!t)throw new p(`Graph.degreeWithoutSelfLoops: could not find the "${e}" node in the graph.`);let n=0,r=0;return this.type!=="directed"&&(n+=t.undirectedDegree,r+=t.undirectedLoops*2),this.type!=="undirected"&&(n+=t.inDegree+t.outDegree,r+=t.directedLoops*2),n-r}source(e){e=""+e;let t=this._edges.get(e);if(!t)throw new p(`Graph.source: could not find the "${e}" edge in the graph.`);return t.source.key}target(e){e=""+e;let t=this._edges.get(e);if(!t)throw new p(`Graph.target: could not find the "${e}" edge in the graph.`);return t.target.key}extremities(e){e=""+e;let t=this._edges.get(e);if(!t)throw new p(`Graph.extremities: could not find the "${e}" edge in the graph.`);return[t.source.key,t.target.key]}opposite(e,t){e=""+e,t=""+t;let n=this._edges.get(t);if(!n)throw new p(`Graph.opposite: could not find the "${t}" edge in the graph.`);let r=n.source.key,o=n.target.key;if(e===r)return o;if(e===o)return r;throw new p(`Graph.opposite: the "${e}" node is not attached to the "${t}" edge (${r}, ${o}).`)}hasExtremity(e,t){e=""+e,t=""+t;let n=this._edges.get(e);if(!n)throw new p(`Graph.hasExtremity: could not find the "${e}" edge in the graph.`);return n.source.key===t||n.target.key===t}isUndirected(e){e=""+e;let t=this._edges.get(e);if(!t)throw new p(`Graph.isUndirected: could not find the "${e}" edge in the graph.`);return t.undirected}isDirected(e){e=""+e;let t=this._edges.get(e);if(!t)throw new p(`Graph.isDirected: could not find the "${e}" edge in the graph.`);return!t.undirected}isSelfLoop(e){e=""+e;let t=this._edges.get(e);if(!t)throw new p(`Graph.isSelfLoop: could not find the "${e}" edge in the graph.`);return t.source===t.target}addNode(e,t){return en(this,e,t).key}mergeNode(e,t){if(t&&!_(t))throw new l(`Graph.mergeNode: invalid attributes. Expecting an object but got "${t}"`);e=""+e,t=t||{};let n=this._nodes.get(e);return n?(t&&(k(n.attributes,t),this.emit("nodeAttributesUpdated",{type:"merge",key:e,attributes:n.attributes,data:t})),[e,!1]):(n=new this.NodeDataClass(e,t),this._nodes.set(e,n),this.emit("nodeAdded",{key:e,attributes:t}),[e,!0])}updateNode(e,t){if(t&&typeof t!="function")throw new l(`Graph.updateNode: invalid updater function. Expecting a function but got "${t}"`);e=""+e;let n=this._nodes.get(e);if(n){if(t){let o=n.attributes;n.attributes=t(o),this.emit("nodeAttributesUpdated",{type:"replace",key:e,attributes:n.attributes})}return[e,!1]}let r=t?t({}):{};return n=new this.NodeDataClass(e,r),this._nodes.set(e,n),this.emit("nodeAdded",{key:e,attributes:r}),[e,!0]}dropNode(e){e=""+e;let t=this._nodes.get(e);if(!t)throw new p(`Graph.dropNode: could not find the "${e}" node in the graph.`);let n;if(this.type!=="undirected"){for(let r in t.out){n=t.out[r];do C(this,n),n=n.next;while(n)}for(let r in t.in){n=t.in[r];do C(this,n),n=n.next;while(n)}}if(this.type!=="directed")for(let r in t.undirected){n=t.undirected[r];do C(this,n),n=n.next;while(n)}this._nodes.delete(e),this.emit("nodeDropped",{key:e,attributes:t.attributes})}dropEdge(e){let t;if(arguments.length>1){let n=""+arguments[0],r=""+arguments[1];if(t=D(this,n,r,this.type),!t)throw new p(`Graph.dropEdge: could not find the "${n}" -> "${r}" edge in the graph.`)}else if(e=""+e,t=this._edges.get(e),!t)throw new p(`Graph.dropEdge: could not find the "${e}" edge in the graph.`);return C(this,t),this}dropDirectedEdge(e,t){if(arguments.length<2)throw new y("Graph.dropDirectedEdge: it does not make sense to try and drop a directed edge by key. What if the edge with this key is undirected? Use #.dropEdge for this purpose instead.");if(this.multi)throw new y("Graph.dropDirectedEdge: cannot use a {source,target} combo when dropping an edge in a MultiGraph since we cannot infer the one you want to delete as there could be multiple ones.");e=""+e,t=""+t;let n=D(this,e,t,"directed");if(!n)throw new p(`Graph.dropDirectedEdge: could not find a "${e}" -> "${t}" edge in the graph.`);return C(this,n),this}dropUndirectedEdge(e,t){if(arguments.length<2)throw new y("Graph.dropUndirectedEdge: it does not make sense to drop a directed edge by key. What if the edge with this key is undirected? Use #.dropEdge for this purpose instead.");if(this.multi)throw new y("Graph.dropUndirectedEdge: cannot use a {source,target} combo when dropping an edge in a MultiGraph since we cannot infer the one you want to delete as there could be multiple ones.");let n=D(this,e,t,"undirected");if(!n)throw new p(`Graph.dropUndirectedEdge: could not find a "${e}" -> "${t}" edge in the graph.`);return C(this,n),this}clear(){this._edges.clear(),this._nodes.clear(),this._resetInstanceCounters(),this.emit("cleared")}clearEdges(){let e=this._nodes.values(),t;for(;t=e.next(),t.done!==!0;)t.value.clear();this._edges.clear(),this._resetInstanceCounters(),this.emit("edgesCleared")}getAttribute(e){return this._attributes[e]}getAttributes(){return this._attributes}hasAttribute(e){return this._attributes.hasOwnProperty(e)}setAttribute(e,t){return this._attributes[e]=t,this.emit("attributesUpdated",{type:"set",attributes:this._attributes,name:e}),this}updateAttribute(e,t){if(typeof t!="function")throw new l("Graph.updateAttribute: updater should be a function.");let n=this._attributes[e];return this._attributes[e]=t(n),this.emit("attributesUpdated",{type:"set",attributes:this._attributes,name:e}),this}removeAttribute(e){return delete this._attributes[e],this.emit("attributesUpdated",{type:"remove",attributes:this._attributes,name:e}),this}replaceAttributes(e){if(!_(e))throw new l("Graph.replaceAttributes: provided attributes are not a plain object.");return this._attributes=e,this.emit("attributesUpdated",{type:"replace",attributes:this._attributes}),this}mergeAttributes(e){if(!_(e))throw new l("Graph.mergeAttributes: provided attributes are not a plain object.");return k(this._attributes,e),this.emit("attributesUpdated",{type:"merge",attributes:this._attributes,data:e}),this}updateAttributes(e){if(typeof e!="function")throw new l("Graph.updateAttributes: provided updater is not a function.");return this._attributes=e(this._attributes),this.emit("attributesUpdated",{type:"update",attributes:this._attributes}),this}updateEachNodeAttributes(e,t){if(typeof e!="function")throw new l("Graph.updateEachNodeAttributes: expecting an updater function.");if(t&&!be(t))throw new l("Graph.updateEachNodeAttributes: invalid hints. Expecting an object having the following shape: {attributes?: [string]}");let n=this._nodes.values(),r,o;for(;r=n.next(),r.done!==!0;)o=r.value,o.attributes=e(o.key,o.attributes);this.emit("eachNodeAttributesUpdated",{hints:t||null})}updateEachEdgeAttributes(e,t){if(typeof e!="function")throw new l("Graph.updateEachEdgeAttributes: expecting an updater function.");if(t&&!be(t))throw new l("Graph.updateEachEdgeAttributes: invalid hints. Expecting an object having the following shape: {attributes?: [string]}");let n=this._edges.values(),r,o,s,a;for(;r=n.next(),r.done!==!0;)o=r.value,s=o.source,a=o.target,o.attributes=e(o.key,o.attributes,s.key,a.key,s.attributes,a.attributes,o.undirected);this.emit("eachEdgeAttributesUpdated",{hints:t||null})}forEachAdjacencyEntry(e){if(typeof e!="function")throw new l("Graph.forEachAdjacencyEntry: expecting a callback.");Q(!1,!1,!1,this,e)}forEachAdjacencyEntryWithOrphans(e){if(typeof e!="function")throw new l("Graph.forEachAdjacencyEntryWithOrphans: expecting a callback.");Q(!1,!1,!0,this,e)}forEachAssymetricAdjacencyEntry(e){if(typeof e!="function")throw new l("Graph.forEachAssymetricAdjacencyEntry: expecting a callback.");Q(!1,!0,!1,this,e)}forEachAssymetricAdjacencyEntryWithOrphans(e){if(typeof e!="function")throw new l("Graph.forEachAssymetricAdjacencyEntryWithOrphans: expecting a callback.");Q(!1,!0,!0,this,e)}nodes(){return Array.from(this._nodes.keys())}forEachNode(e){if(typeof e!="function")throw new l("Graph.forEachNode: expecting a callback.");let t=this._nodes.values(),n,r;for(;n=t.next(),n.done!==!0;)r=n.value,e(r.key,r.attributes)}findNode(e){if(typeof e!="function")throw new l("Graph.findNode: expecting a callback.");let t=this._nodes.values(),n,r;for(;n=t.next(),n.done!==!0;)if(r=n.value,e(r.key,r.attributes))return r.key}mapNodes(e){if(typeof e!="function")throw new l("Graph.mapNode: expecting a callback.");let t=this._nodes.values(),n,r,o=new Array(this.order),s=0;for(;n=t.next(),n.done!==!0;)r=n.value,o[s++]=e(r.key,r.attributes);return o}someNode(e){if(typeof e!="function")throw new l("Graph.someNode: expecting a callback.");let t=this._nodes.values(),n,r;for(;n=t.next(),n.done!==!0;)if(r=n.value,e(r.key,r.attributes))return!0;return!1}everyNode(e){if(typeof e!="function")throw new l("Graph.everyNode: expecting a callback.");let t=this._nodes.values(),n,r;for(;n=t.next(),n.done!==!0;)if(r=n.value,!e(r.key,r.attributes))return!1;return!0}filterNodes(e){if(typeof e!="function")throw new l("Graph.filterNodes: expecting a callback.");let t=this._nodes.values(),n,r,o=[];for(;n=t.next(),n.done!==!0;)r=n.value,e(r.key,r.attributes)&&o.push(r.key);return o}reduceNodes(e,t){if(typeof e!="function")throw new l("Graph.reduceNodes: expecting a callback.");if(arguments.length<2)throw new l("Graph.reduceNodes: missing initial value. You must provide it because the callback takes more than one argument and we cannot infer the initial value from the first iteration, as you could with a simple array.");let n=t,r=this._nodes.values(),o,s;for(;o=r.next(),o.done!==!0;)s=o.value,n=e(n,s.key,s.attributes);return n}nodeEntries(){let e=this._nodes.values();return{[Symbol.iterator](){return this},next(){let t=e.next();if(t.done)return t;let n=t.value;return{value:{node:n.key,attributes:n.attributes},done:!1}}}}export(){let e=new Array(this._nodes.size),t=0;this._nodes.forEach((r,o)=>{e[t++]=Yt(o,r)});let n=new Array(this._edges.size);return t=0,this._edges.forEach((r,o)=>{n[t++]=Qt(this.type,o,r)}),{options:{type:this.type,multi:this.multi,allowSelfLoops:this.allowSelfLoops},attributes:this.getAttributes(),nodes:e,edges:n}}import(e,t=!1){if(e instanceof i)return e.forEachNode((u,d)=>{t?this.mergeNode(u,d):this.addNode(u,d)}),e.forEachEdge((u,d,c,h,f,g,w)=>{t?w?this.mergeUndirectedEdgeWithKey(u,c,h,d):this.mergeDirectedEdgeWithKey(u,c,h,d):w?this.addUndirectedEdgeWithKey(u,c,h,d):this.addDirectedEdgeWithKey(u,c,h,d)}),this;if(!_(e))throw new l("Graph.import: invalid argument. Expecting a serialized graph or, alternatively, a Graph instance.");if(e.attributes){if(!_(e.attributes))throw new l("Graph.import: invalid attributes. Expecting a plain object.");t?this.mergeAttributes(e.attributes):this.replaceAttributes(e.attributes)}let n,r,o,s,a;if(e.nodes){if(o=e.nodes,!Array.isArray(o))throw new l("Graph.import: invalid nodes. Expecting an array.");for(n=0,r=o.length;n<r;n++){s=o[n],Xt(s);let{key:u,attributes:d}=s;t?this.mergeNode(u,d):this.addNode(u,d)}}if(e.edges){let u=!1;if(this.type==="undirected"&&(u=!0),o=e.edges,!Array.isArray(o))throw new l("Graph.import: invalid edges. Expecting an array.");for(n=0,r=o.length;n<r;n++){a=o[n],Ht(a);let{source:d,target:c,attributes:h,undirected:f=u}=a,g;"key"in a?(g=t?f?this.mergeUndirectedEdgeWithKey:this.mergeDirectedEdgeWithKey:f?this.addUndirectedEdgeWithKey:this.addDirectedEdgeWithKey,g.call(this,a.key,d,c,h)):(g=t?f?this.mergeUndirectedEdge:this.mergeDirectedEdge:f?this.addUndirectedEdge:this.addDirectedEdge,g.call(this,d,c,h))}}return this}nullCopy(e){let t=new i(k({},this._options,e));return t.replaceAttributes(k({},this.getAttributes())),t}emptyCopy(e){let t=this.nullCopy(e);return this._nodes.forEach((n,r)=>{let o=k({},n.attributes);n=new t.NodeDataClass(r,o),t._nodes.set(r,n)}),t}copy(e){if(e=e||{},typeof e.type=="string"&&e.type!==this.type&&e.type!=="mixed")throw new y(`Graph.copy: cannot create an incompatible copy from "${this.type}" type to "${e.type}" because this would mean losing information about the current graph.`);if(typeof e.multi=="boolean"&&e.multi!==this.multi&&e.multi!==!0)throw new y("Graph.copy: cannot create an incompatible copy by downgrading a multi graph to a simple one because this would mean losing information about the current graph.");if(typeof e.allowSelfLoops=="boolean"&&e.allowSelfLoops!==this.allowSelfLoops&&e.allowSelfLoops!==!0)throw new y("Graph.copy: cannot create an incompatible copy from a graph allowing self loops to one that does not because this would mean losing information about the current graph.");let t=this.emptyCopy(e),n=this._edges.values(),r,o;for(;r=n.next(),r.done!==!0;)o=r.value,Se(t,"copy",!1,o.undirected,o.key,o.source.key,o.target.key,k({},o.attributes));return t}toJSON(){return this.export()}toString(){return"[object Graph]"}inspect(){let e={};this._nodes.forEach((o,s)=>{e[s]=o.attributes});let t={},n={};this._edges.forEach((o,s)=>{let a=o.undirected?"--":"->",u="",d=o.source.key,c=o.target.key,h;o.undirected&&d>c&&(h=d,d=c,c=h);let f=`(${d})${a}(${c})`;s.startsWith("geid_")?this.multi&&(typeof n[f]>"u"?n[f]=0:n[f]++,u+=`${n[f]}. `):u+=`[${s}]: `,u+=f,t[u]=o.attributes});let r={};for(let o in this)this.hasOwnProperty(o)&&!$e.has(o)&&typeof this[o]!="function"&&typeof o!="symbol"&&(r[o]=this[o]);return r.attributes=this._attributes,r.nodes=e,r.edges=t,A(r,"constructor",this.constructor),r}};typeof Symbol<"u"&&($.prototype[Symbol.for("nodejs.util.inspect.custom")]=$.prototype.inspect);Zt.forEach(i=>{["add","merge","update"].forEach(e=>{let t=i.name(e),n=e==="add"?Se:tn;i.generateKey?$.prototype[t]=function(r,o,s){return n(this,t,!0,(i.type||this.type)==="undirected",null,r,o,s,e==="update")}:$.prototype[t]=function(r,o,s,a){return n(this,t,!1,(i.type||this.type)==="undirected",r,o,s,a,e==="update")}})});ht($);vt($);Tt($);Bt($);var I=class extends ${constructor(e){let t=k({type:"directed"},e);if("multi"in t&&t.multi!==!1)throw new l("DirectedGraph.from: inconsistent indication that the graph should be multi in given options!");if(t.type!=="directed")throw new l('DirectedGraph.from: inconsistent "'+t.type+'" type in given options!');super(t)}},X=class extends ${constructor(e){let t=k({type:"undirected"},e);if("multi"in t&&t.multi!==!1)throw new l("UndirectedGraph.from: inconsistent indication that the graph should be multi in given options!");if(t.type!=="undirected")throw new l('UndirectedGraph.from: inconsistent "'+t.type+'" type in given options!');super(t)}},H=class extends ${constructor(e){let t=k({multi:!0},e);if("multi"in t&&t.multi!==!0)throw new l("MultiGraph.from: inconsistent indication that the graph should be simple in given options!");super(t)}},J=class extends ${constructor(e){let t=k({type:"directed",multi:!0},e);if("multi"in t&&t.multi!==!0)throw new l("MultiDirectedGraph.from: inconsistent indication that the graph should be simple in given options!");if(t.type!=="directed")throw new l('MultiDirectedGraph.from: inconsistent "'+t.type+'" type in given options!');super(t)}},V=class extends ${constructor(e){let t=k({type:"undirected",multi:!0},e);if("multi"in t&&t.multi!==!0)throw new l("MultiUndirectedGraph.from: inconsistent indication that the graph should be simple in given options!");if(t.type!=="undirected")throw new l('MultiUndirectedGraph.from: inconsistent "'+t.type+'" type in given options!');super(t)}};function W(i){i.from=function(e,t){let n=k({},e.options,t),r=new i(n);return r.import(e),r}}W($);W(I);W(X);W(H);W(J);W(V);$.Graph=$;$.DirectedGraph=I;$.UndirectedGraph=X;$.MultiGraph=H;$.MultiDirectedGraph=J;$.MultiUndirectedGraph=V;$.InvalidArgumentsGraphError=l;$.NotFoundGraphError=p;$.UsageGraphError=y;function j(i,e,t,n,r,o,s){let a=(e+n)/2,u=(t+r)/2;if(s===0||i.length<=o)return{data:{type:"points",points:i},x1:e,y1:t,x2:n,y2:r,midX:a,midY:u};let d=[[],[],[],[]];for(let c=0;c<i.length;c++){let h=i[c],f=(h.x>a?1:0)+(h.y>u?2:0);d[f].push(h)}return{x1:e,y1:t,x2:n,y2:r,midX:a,midY:u,data:{type:"children",children:[j(d[0],e,t,a,u,o,s-1),j(d[1],a,t,n,u,o,s-1),j(d[2],e,u,a,r,o,s-1),j(d[3],a,u,n,r,o,s-1)]}}}function Me(i,e,t,n){return!(e<t||n<i)}function R(i,e,t,n,r){return Me(e,n,i.x1,i.x2)&&Me(t,r,i.y1,i.y2)?i.data.type==="points"?i.data.points:[...R(i.data.children[0],e,t,n,r),...R(i.data.children[1],e,t,n,r),...R(i.data.children[2],e,t,n,r),...R(i.data.children[3],e,t,n,r)]:[]}function Ue(i){let e=new Map,t=new Set(i.nodes());function n(r,o){if(!t.has(r))return;t.delete(r),o.add(r),e.set(r,o);let s=i.neighbors(r);for(let a of s)n(a,o)}for(console.log("a");t.size>0;){let r=new Set,o=t.values().next().value;n(o,r)}return console.log("b"),e}var G,oe,Oe={setGraph(i){G=new I().import(i);for(let e of G.nodes()){let t=G.getNodeAttributes(e);G.setNodeAttribute(e,"mass",G.degree(e)+1+Math.random()*10),G.setNodeAttribute(e,"x2",t.x),G.setNodeAttribute(e,"y2",t.y)}oe=Ue(G)},applyIteration(i,e){return rn(G,{repulsion:i,neighborAttraction:e}),G.nodes().map(t=>{let n=G.getNodeAttributes(t);return{id:t,x:n.x,y:n.y}})},moveNodeTo(i,e,t){G.setNodeAttribute(i,"x",e),G.setNodeAttribute(i,"y",t),G.setNodeAttribute(i,"x2",e),G.setNodeAttribute(i,"y2",t)}};function Ce(i,e,t,n,r=0){let o=i.getNodeAttributes(e),s=i.getNodeAttributes(t),a=o.x-s.x,u=o.y-s.y,d=Math.hypot(a,u),c=a/d*n+-u/d*r,h=u/d*n+a/d*r;i.setNodeAttribute(e,"x2",o.x2+c/o.mass),i.setNodeAttribute(e,"y2",o.y2+h/o.mass),i.setNodeAttribute(t,"x2",s.x2-c/s.mass),i.setNodeAttribute(t,"y2",s.y2-h/s.mass)}function Ie(i,e){return Math.max(i.getNodeAttribute(e,"mass")**.9*10,20)}function rn(i,e){let t=new Map,n=new Set(oe.values());for(let c of n){let h=0,f=0;for(let g of c){let w=i.getNodeAttributes(g);h+=w.x,f+=w.y}h/=c.size,f/=c.size,t.set(c,{x:h,y:f})}let r=1/0,o=1/0,s=-1/0,a=-1/0;for(let c of i.nodes()){let h=i.getNodeAttributes(c);r=Math.min(r,h.x),s=Math.max(s,h.x),o=Math.min(o,h.y),a=Math.max(a,h.y)}let u=j(i.nodes().map(c=>{let h=i.getNodeAttributes(c);return{id:c,x:h.x,y:h.y}}),r,o,s,a,1,15),d=0;for(let c of i.nodes()){let h=i.getNodeAttributes(c),f=i.degree(c),g=Ie(i,c),w=R(u,h.x-g,h.y-g,h.x+g,h.y+g);for(let b of w){d++;let v=b.x-h.x,x=b.y-h.y,E=Math.hypot(v,x);E<g&&E!==0&&b.id!==c&&Ce(i,c,b.id,Math.max(0,Math.min(10,e.repulsion*g*i.getNodeAttribute(b.id,"mass")/E)),(Math.random()-.5)*e.repulsion*2)}}for(let c of i.nodes()){let h=i.inboundNeighbors(c).concat(i.outboundNeighbors(c)),f=i.getNodeAttributes(c),g=Ie(i,c),w=h.length;for(let b of h){let v=i.getNodeAttributes(b),x=i.degree(b),E=v.x-f.x,M=v.y-f.y,K=Math.hypot(E,M);K!==0&&K>g&&Ce(i,c,b,-e.neighborAttraction*K**.7/(w+1))}}for(let c of i.nodes()){let h=oe.get(c);if(h.size<=1)continue;let f=t.get(h),g=i.getNodeAttributes(c),w=g.x-f.x,b=g.y-f.y,v=Math.hypot(w,b);if(v>.1){let x=.005*v**.5*e.neighborAttraction;i.setNodeAttribute(c,"x2",g.x2+w/v*x),i.setNodeAttribute(c,"y2",g.y2+b/v*x)}}for(let c of i.nodes()){let h=i.getNodeAttributes(c);i.setNodeAttribute(c,"x",h.x2),i.setNodeAttribute(c,"y",h.y2)}}var gn=ae(Oe,"graph",i=>{let e=t=>{i(t.data)};return self.addEventListener("message",e),()=>self.removeEventListener("message",e)},i=>{self.postMessage(i)});})();
//# sourceMappingURL=wiki-article-graph-worker.js.map
